################# CSC258 Assembly Final Project ###################
# This file contains our implementation of Dr Mario.
#
# Student 1: Helen Zhao, 1010138995
# Student 2: Alan Su, 1010294209
#
# We assert that the code submitted here is entirely our own 
# creation, and will indicate otherwise when it is not.
#
######################## Bitmap Display Configuration ########################
# - Unit width in pixels:       1
# - Unit height in pixels:      1
# - Display width in pixels:    120
# - Display height in pixels:   60
# - Base Address for Display:   0x10008000 ($gp)
##############################################################################

    .data 
##############################################################################
# Immutable Data
##############################################################################
    .data
ADDR_DSPL:
    .word 0x10008000
ADDR_KBRD:
    .word 0xffff0000

# Grid and sizes
# GRID:
    # .space 28800 # 60 * 60 * 4
GRID_SIZE:
    .word 28800
DISPLAY_WIDTH:
    .word 120
DISPLAY_HEIGHT:
    .word 60
PIXEL_SIZE:
    .word 4
CELL_SIZE:
    .word 3
CLEAR_LENGTH:
    .word 4

# Framerate and timing
FRAMERATE:
    .word 180
ANIMATION_MULTIPLIER:
    .word 1

# Area in jar within border, inclusive
MIN_X:
    .word 9
MAX_X:
    .word 50
MIN_Y:
    .word 9
MAX_Y:
    .word 56
LID_MIN_X:
    .word 24
LID_MAX_X:
    .word 35
LID_MIN_Y:
    .word 3

# Colors
RED_COLOR:
    .word 0xFF79C6
YELLOW_COLOR:
    .word 0xF1FA8C
BLUE_COLOR:
    .word 0x8BE9FD
JAR_COLOR:
    .word 0x6272A4
JAR_HIGHLIGHT_COLOR:
    .word 0xFFB86C
CLEAR_COLOR:
    .word 0xFFB86C
BACKGROUND_COLOR:
    .word 0x282A36

# Pixel art
SAMPLE_ART_DATA:
    .word 
        0, 0, 0xff0000,
        1, 0, 0xffff00,
        0, 1, 0x00ff00,
        1, 1, 0x0000ff
SAMPLE_ART_SIZE:
    .word 4

DR_MARIO_DATA:
    .word 
        9, 0, 0x7a5448,
        3, 1, 0x7a5448,
        4, 1, 0x7a5448,
        5, 1, 0x7a5448,
        6, 1, 0x7a5448,
        7, 1, 0x9e9e9e,
        8, 1, 0xffffff,
        9, 1, 0x7a5448,
        2, 2, 0x4050b5,
        3, 2, 0x4050b5,
        4, 2, 0x4050b5,
        5, 2, 0x4050b5,
        6, 2, 0x4050b5,
        7, 2, 0x9e9e9e, 
        8, 2, 0xffffff,
        2, 3, 0x7a5448,
        3, 3, 0x7a5448,
        4, 3, 0x7a5448,
        5, 3, 0xffcc80,
        6, 3, 0xffcc80,
        7, 3, 0x000000,
        8, 3, 0xffcc80,
        1, 4, 0x7a5448,
        2, 4, 0xffcc80,
        3, 4, 0x7a5448,
        4, 4, 0xffcc80, 
        5, 4, 0xffcc80,
        6, 4, 0xffcc80,
        7, 4, 0x000000,
        8, 4, 0xffcc80,
        9, 4, 0xffcc80,
        10, 4, 0xffcc80,
        1, 5, 0x7a5448,
        2, 5, 0xffcc80,
        3, 5, 0x7a5448,
        4, 5, 0x7a5448,
        5, 5, 0xffcc80,
        6, 5, 0xffcc80,
        7, 5, 0xffcc80,
        8, 5, 0x000000,
        9, 5, 0xffcc80,
        10, 5, 0xffcc80,
        11, 5, 0xffcc80,
        1, 6, 0x7a5448,
        2, 6, 0x7a5448,
        3, 6, 0xffcc80,
        4, 6, 0xffcc80,
        5, 6, 0xffcc80,
        6, 6, 0xffcc80,
        7, 6, 0x000000,
        8, 6, 0x000000,
        9, 6, 0x000000,
        10, 6, 0x000000,
        3, 7, 0xffcc80,
        4, 7, 0xffcc80,
        5, 7, 0xffcc80,
        6, 7, 0xffcc80,
        7, 7, 0xffcc80,
        8, 7, 0xffcc80,
        9, 7, 0xffcc80,
        2, 8, 0xffffff,
        3, 8, 0xffffff,
        4, 8, 0x607d8b,
        5, 8, 0xffffff,
        6, 8, 0xf44336,
        7, 8, 0xf44336,
        1, 9, 0xffffff,
        2, 9, 0xffffff,
        3, 9, 0xffffff,
        4, 9, 0xffffff,
        5, 9, 0x607d8b,
        6, 9, 0xf44336,
        7, 9, 0xffffff,
        8, 9, 0xffffff,
        9, 9, 0xffffff,
        10, 9, 0xffffff,
        0, 10, 0xffffff,
        1, 10, 0xffffff,
        2, 10, 0xffffff, 
        3, 10, 0xffffff,
        4, 10, 0xffffff,
        5, 10, 0xffffff,
        6, 10, 0x607d8b,
        7, 10, 0xffffff, 
        8, 10, 0xffffff, 
        9, 10, 0xffffff,
        10, 10, 0xffffff, 
        11, 10, 0xffffff, 
        0, 11, 0x607d8b,
        1, 11, 0x607d8b,
        2, 11, 0x607d8b, 
        3, 11, 0xffffff,
        4, 11, 0xffffff,
        5, 11, 0xffffff,
        6, 11, 0x607d8b,
        7, 11, 0x607d8b, 
        8, 11, 0xffffff, 
        9, 11, 0xffffff,
        10, 11, 0x607d8b, 
        11, 11, 0x607d8b, 
        0, 12, 0x9e9e9e,
        1, 12, 0x9e9e9e,
        2, 12, 0x9e9e9e, 
        3, 12, 0xffffff,
        4, 12, 0xffffff,
        5, 12, 0xffffff,
        6, 12, 0xffffff,
        7, 12, 0xffffff, 
        8, 12, 0xffffff, 
        9, 12, 0x9e9e9e,
        10, 12, 0x9e9e9e, 
        11, 12, 0x9e9e9e, 
        0, 13, 0x9e9e9e,
        1, 13, 0x9e9e9e,
        2, 13, 0xffffff, 
        3, 13, 0xffffff,
        4, 13, 0xffffff,
        5, 13, 0xffffff,
        6, 13, 0xffffff,
        7, 13, 0xffffff, 
        8, 13, 0xffffff, 
        9, 13, 0xffffff,
        10, 13, 0x9e9e9e, 
        11, 13, 0x9e9e9e, 
        2, 14, 0x4050b5,
        3, 14, 0x4050b5,
        4, 14, 0x4050b5,
        7, 14, 0x4050b5,
        8, 14, 0x4050b5,
        9, 14, 0x4050b5
        1, 15, 0x7a5448,
        2, 15, 0x7a5448,
        3, 15, 0x7a5448,
        8, 15, 0x7a5448,
        9, 15, 0x7a5448,
        10, 15, 0x7a5448
        0, 16, 0x7a5448,
        1, 16, 0x7a5448,
        2, 16, 0x7a5448,
        3, 16, 0x7a5448,
        8, 16, 0x7a5448,
        9, 16, 0x7a5448,
        10, 16, 0x7a5448,
        11, 16, 0x7a5448,
        
DR_MARIO_SIZE:
    .word 144

# IMAGE_DATA:
     # 1,   2,    0xec1c26,     3,   2,    0xef1e26,     7,   2,    0xef1d24,
     # 1,   3,    0xed1e25,     3,   3,    0xef1d26,     5,   3,    0xee1f27,     7,   3,    0xec1e24,
     # 1,   4,    0xed1d26,     2,   4,    0xef1e25,     3,   4,    0xee1c26,     7,   4,    0xed1d24,
     # 1,   5,    0xee1d27,     3,   5,    0xed1f25,     5,   5,    0xed1e25,
     # 1,   6,    0xec1c24,     3,   6,    0xef1f24,     5,   6,    0xec1e26,     7,   6,    0xec1d27,

# IMAGE_SIZE: .word 18

DR_MARIO_ENGELS_DATA:
     25,    0,    0x4d433f,     26,    0,    0x5d4f4e,     27,    0,    0x383530,     28,    0,    0x625f54,
     20,    1,    0x877a71,     21,    1,    0x2b2220,     23,    1,    0x40332f,     24,    1,    0x54463e,     25,    1,    0x312b27,     26,    1,    0x29201e,     27,    1,    0x271f1a,     28,    1,    0x4c433f,     29,    1,    0x2b2520,     30,    1,    0x797468,     31,    1,    0x1b1411,     32,    1,    0x443635,     33,    1,    0x45352c,
     18,    2,    0x635450,     19,    2,    0x2e1f1e,     20,    2,    0x281e1c,     21,    2,    0x362c2a,     22,    2,    0x1d1713,     23,    2,    0x0f0a08,     24,    2,    0x2c2121,     25,    2,    0x2c2420,     26,    2,    0x271e1c,     27,    2,    0x2d2321,     28,    2,    0x221d1a,     29,    2,    0x58514b,     30,    2,    0xbfb8ac,     31,    2,    0x6b6255,     32,    2,    0x2e2421,     33,    2,    0x5c4d42,
     16,    3,    0x5d5556,     17,    3,    0x4c423f,     18,    3,    0x4a3731,     19,    3,    0x392e2d,     20,    3,    0x0e080a,     21,    3,    0x17130f,     22,    3,    0x1d1410,     23,    3,    0x2c2421,     24,    3,    0x2e2624,     25,    3,    0x100e0b,     26,    3,    0x1d1614,     27,    3,    0x1a191b,     28,    3,    0x3b3737,     29,    3,    0x5b5b5b,     30,    3,    0x5b5b5b,     31,    3,    0x555455,     32,    3,    0x303330,     33,    3,    0x312f2c,     34,    3,    0x2f2826,     35,    3,    0x151420,
     15,    4,    0x41454d,     16,    4,    0x3f332d,     17,    4,    0x211917,     18,    4,    0x4c4241,     19,    4,    0x010101,     20,    4,    0x000000,     21,    4,    0x1b1417,     22,    4,    0x000200,     23,    4,    0x282222,     24,    4,    0x0d0b0e,     25,    4,    0x080b07,     26,    4,    0x312a28,     27,    4,    0x494546,     28,    4,    0x606062,     29,    4,    0x8c8b8b,     30,    4,    0xa1a1a1,     31,    4,    0x989795,     32,    4,    0x585858,     33,    4,    0x322d32,     34,    4,    0x21231e,     35,    4,    0x2d2a30,     36,    4,    0x141c24,
     15,    5,    0x1d0f0a,     16,    5,    0x3c312f,     17,    5,    0x64544d,     18,    5,    0x110d0e,     19,    5,    0x120e0d,     20,    5,    0x38312e,     21,    5,    0x1b1818,     22,    5,    0x0b0b0b,     23,    5,    0x373534,     24,    5,    0x1d1818,     25,    5,    0x11130e,     26,    5,    0x3f3a3a,     27,    5,    0x5a5a5a,     28,    5,    0x929292,     29,    5,    0xaeaeae,     30,    5,    0xbababa,     31,    5,    0xbbbbbb,     32,    5,    0xa9a9a9,     33,    5,    0x2a282a,     34,    5,    0x2b2726,     35,    5,    0x1d1b1b,     36,    5,    0x0a0611,
     14,    6,    0x2e201d,     15,    6,    0x312723,     16,    6,    0x2f2724,     17,    6,    0x110c0a,     18,    6,    0x0b0b0b,     19,    6,    0x0b080b,     20,    6,    0x1d1513,     21,    6,    0x161414,     22,    6,    0x090a0b,     23,    6,    0x231b19,     24,    6,    0x1e1b17,     25,    6,    0x232323,     26,    6,    0x525253,     27,    6,    0x888788,     28,    6,    0x8c8c8c,     29,    6,    0xbfbfc1,     30,    6,    0xc5c5c5,     31,    6,    0xc4c4c7,     32,    6,    0xbababa,     33,    6,    0x7b7978,     34,    6,    0x1c1b19,     35,    6,    0x22222b,     36,    6,    0x353238,
     14,    7,    0x2a201f,     15,    7,    0x18100e,     16,    7,    0x241e19,     17,    7,    0x100c0c,     18,    7,    0x2d2825,     19,    7,    0x4e3833,     20,    7,    0x704c40,     21,    7,    0x8c6351,     22,    7,    0x7e5b4f,     23,    7,    0x2a1c19,     24,    7,    0x9b6955,     25,    7,    0x9d7a66,     26,    7,    0x646465,     27,    7,    0x7d7c7c,     28,    7,    0x828384,     29,    7,    0xb4b3b4,     30,    7,    0xc7c8c9,     31,    7,    0xc7c7c8,     32,    7,    0xb9b9b9,     33,    7,    0x979493,     34,    7,    0x252727,     35,    7,    0x1a1c25,     36,    7,    0x0c1220,
     12,    8,    0x3e302a,     13,    8,    0x302724,     14,    8,    0x382e2b,     15,    8,    0x291f1e,     16,    8,    0x1b1311,     17,    8,    0x181716,     18,    8,    0x594035,     19,    8,    0xa77a66,     20,    8,    0xb4816b,     21,    8,    0xbc876e,     22,    8,    0x4d322a,     23,    8,    0x936351,     24,    8,    0xaf7863,     25,    8,    0xac8473,     26,    8,    0x616366,     27,    8,    0x858585,     28,    8,    0x8c8a8b,     29,    8,    0xb5b2b3,     30,    8,    0xbdbbbc,     31,    8,    0xc2bfc0,     32,    8,    0xb6b6b6,     33,    8,    0x939292,     34,    8,    0x31322e,     35,    8,    0x040406,     36,    8,    0x4b5763,
     12,    9,    0x302422,     13,    9,    0x312624,     14,    9,    0x0f0a0a,     15,    9,    0x3b312f,     16,    9,    0x1e1916,     17,    9,    0x211c1b,     18,    9,    0x5c3d36,     19,    9,    0xac836c,     20,    9,    0xbd8c78,     21,    9,    0xd09985,     22,    9,    0xc68f78,     23,    9,    0xb07e67,     24,    9,    0xb67d69,     25,    9,    0xb18b76,     26,    9,    0x61625d,     27,    9,    0x888888,     28,    9,    0x8c8b8f,     29,    9,    0xa4a3a4,     30,    9,    0xafaeaf,     31,    9,    0xb9b9b9,     32,    9,    0xacacac,     33,    9,    0x80868b,     34,    9,    0x2c282a,     35,    9,    0x1a1722,     36,    9,    0x1e1c29,
     11,   10,    0x4c4239,     12,   10,    0x352b29,     13,   10,    0x291f1c,     14,   10,    0x302523,     15,   10,    0x28201c,     16,   10,    0x201817,     17,   10,    0x382e2b,     18,   10,    0x70544a,     19,   10,    0x5e3b20,     20,   10,    0x694125,     21,   10,    0x6b4226,     22,   10,    0x643e21,     23,   10,    0x623a1f,     24,   10,    0x643d22,     25,   10,    0x6f563c,     26,   10,    0x5b5b58,     27,   10,    0x858488,     28,   10,    0x8d8c8e,     29,   10,    0x8d8c8c,     30,   10,    0x939494,     31,   10,    0x959094,     32,   10,    0x9d9c9b,     33,   10,    0x6f6e6f,     34,   10,    0x402917,     35,   10,    0x141319,
     11,   11,    0x695f54,     12,   11,    0x3b312f,     13,   11,    0x312422,     14,   11,    0x312725,     15,   11,    0x2c2323,     16,   11,    0x322826,     17,   11,    0x3c230c,     18,   11,    0x56361c,     19,   11,    0x613e23,     20,   11,    0x694325,     21,   11,    0x694225,     22,   11,    0x6b4327,     23,   11,    0x694124,     24,   11,    0x684024,     25,   11,    0x72503a,     26,   11,    0x555555,     27,   11,    0x969398,     28,   11,    0x939795,     29,   11,    0x848383,     30,   11,    0x868686,     31,   11,    0x88888e,     32,   11,    0x8d8986,     33,   11,    0x5e5e5e,     34,   11,    0x351e09,     35,   11,    0x422716,
     11,   12,    0x53453f,     12,   12,    0x382f2d,     13,   12,    0x302321,     14,   12,    0x3c220c,     15,   12,    0x3e230d,     16,   12,    0x3b220b,     17,   12,    0x462912,     18,   12,    0x56361c,     19,   12,    0x674226,     20,   12,    0x694125,     21,   12,    0xcc947e,     22,   12,    0xd1957d,     23,   12,    0xd2967f,     24,   12,    0xce957d,     25,   12,    0xc9937b,     26,   12,    0xb59383,     27,   12,    0x525352,     28,   12,    0x928696,     29,   12,    0x8e8988,     30,   12,    0x969296,     31,   12,    0x98929d,     32,   12,    0x5b5a5b,     33,   12,    0x5a3d23,     34,   12,    0x391d08,     35,   12,    0x543826,
     10,   13,    0x634d46,     11,   13,    0x41250f,     12,   13,    0x3f240d,     13,   13,    0x41250e,     14,   13,    0x432710,     15,   13,    0x472a13,     16,   13,    0x3e220b,     17,   13,    0x4a2b14,     18,   13,    0xab826e,     19,   13,    0xd09981,     20,   13,    0xd4967d,     21,   13,    0xcc967d,     22,   13,    0xcd9479,     23,   13,    0xc89277,     24,   13,    0xce967f,     25,   13,    0xcc947b,     26,   13,    0xce9886,     27,   13,    0xb19389,     28,   13,    0x525352,     29,   13,    0x515250,     30,   13,    0x525250,     31,   13,    0x525250,     32,   13,    0xaa7c6b,     33,   13,    0x9a6e5d,     34,   13,    0x291a1b,
     10,   14,    0x4a2f19,     11,   14,    0x442912,     12,   14,    0x442912,     13,   14,    0x432710,     14,   14,    0x442710,     15,   14,    0x472b13,     16,   14,    0x4f3932,     17,   14,    0x806255,     18,   14,    0xce9980,     19,   14,    0xdd9e85,     20,   14,    0xd69c86,     21,   14,    0xd19982,     22,   14,    0xd2987e,     23,   14,    0xd49b7d,     24,   14,    0xdaa28b,     25,   14,    0xda9f8b,     26,   14,    0xd89e8a,     27,   14,    0xcc9887,     28,   14,    0xbb9085,     29,   14,    0xb98e81,     30,   14,    0xb78981,     31,   14,    0xb78a78,     32,   14,    0xad7964,     33,   14,    0x9b6e5e,     34,   14,    0x53372d,
     10,   15,    0x50351f,     11,   15,    0x442b12,     12,   15,    0x3e230c,     13,   15,    0x463530,     14,   15,    0x554037,     15,   15,    0x5b443a,     16,   15,    0x5e483d,     17,   15,    0xcf9c84,     18,   15,    0xdfa48e,     19,   15,    0xdba288,     20,   15,    0xd59c80,     21,   15,    0xd79f88,     22,   15,    0xd19480,     23,   15,    0xd29981,     24,   15,    0xd49f8b,     25,   15,    0xc6947e,     26,   15,    0xd99d89,     27,   15,    0xcf9682,     28,   15,    0xcb9582,     29,   15,    0xc3917f,     30,   15,    0xbd8a7a,     31,   15,    0xc08975,     32,   15,    0xb37f6a,     33,   15,    0x9a6e5c,     34,   15,    0x542e27,
     10,   16,    0x5a412b,     11,   16,    0x422710,     12,   16,    0x483730,     13,   16,    0x3c2f29,     14,   16,    0x6d554e,     15,   16,    0xaf9080,     16,   16,    0xc69a87,     17,   16,    0xdea591,     18,   16,    0xdea48d,     19,   16,    0xd99f8b,     20,   16,    0xd4977f,     21,   16,    0xc68f7c,     22,   16,    0xa87d70,     23,   16,    0x936a5e,     24,   16,    0x72534c,     25,   16,    0x5a413f,     26,   16,    0x5e453e,     27,   16,    0x805c51,     28,   16,    0xc28d7c,     29,   16,    0xc18c7a,     30,   16,    0xc5907d,     31,   16,    0xc48c7e,     32,   16,    0xb98476,     33,   16,    0x9b6d5d,     34,   16,    0x4a211e,
     10,   17,    0x777374,     11,   17,    0x504645,     12,   17,    0x4d3f3d,     13,   17,    0x7a665f,     14,   17,    0x988983,     15,   17,    0xd9c7bd,     16,   17,    0xbda091,     17,   17,    0x997c6f,     18,   17,    0x6d5455,     19,   17,    0x705846,     20,   17,    0x665f57,     21,   17,    0x333237,     22,   17,    0x755d55,     23,   17,    0x765c53,     24,   17,    0x4b332e,     25,   17,    0x795b50,     26,   17,    0x8a6654,     27,   17,    0x957167,     28,   17,    0xa57c6d,     29,   17,    0xc38d81,     30,   17,    0xc6917f,     31,   17,    0xc79282,     32,   17,    0xb98574,     33,   17,    0xb18072,     34,   17,    0x502b21,
     10,   18,    0xebc6b6,     11,   18,    0xd08072,     12,   18,    0x1a0f0e,     13,   18,    0xaa989c,     14,   18,    0x593d38,     15,   18,    0x8d6e5e,     16,   18,    0xa58275,     17,   18,    0xa78f86,     18,   18,    0xaf8779,     19,   18,    0xa27364,     20,   18,    0x765c57,     21,   18,    0x1c181d,     22,   18,    0x986d60,     23,   18,    0x8d7065,     24,   18,    0x826054,     25,   18,    0x7e574a,     26,   18,    0x987263,     27,   18,    0x875b4e,     28,   18,    0xb18477,     29,   18,    0xbc8a7c,     30,   18,    0xbf8879,     31,   18,    0xb68778,     32,   18,    0x846154,     33,   18,    0x59413b,     34,   18,    0x5d4137,
     10,   19,    0xc6604e,     11,   19,    0xd79b89,     12,   19,    0xaf6e5f,     13,   19,    0xbe9a91,     14,   19,    0x7d6255,     15,   19,    0xca9b84,     16,   19,    0xdea490,     17,   19,    0xd49a84,     18,   19,    0xc88e7b,     19,   19,    0xb88772,     20,   19,    0x966052,     21,   19,    0x8e746d,     22,   19,    0x654b43,     23,   19,    0x4c4a4c,     24,   19,    0x3c3432,     25,   19,    0x745d53,     26,   19,    0x82534a,     27,   19,    0xa27862,     28,   19,    0xa98d85,     29,   19,    0x291f1f,     30,   19,    0x7b574b,     31,   19,    0x7d584b,     32,   19,    0x704f45,     33,   19,    0x4c3834,     34,   19,    0x3b2d2a,     35,   19,    0x1c0f11,
     10,   20,    0xca574e,     11,   20,    0xba7664,     12,   20,    0xf7cdbf,     13,   20,    0xd1a69a,     14,   20,    0x836559,     15,   20,    0xcb937f,     16,   20,    0xd99e8b,     17,   20,    0xd09884,     18,   20,    0xcb937c,     19,   20,    0xb8826c,     20,   20,    0xa16d58,     21,   20,    0xa47d71,     22,   20,    0xae8173,     23,   20,    0x9e7e72,     24,   20,    0x91756c,     25,   20,    0x8d6257,     26,   20,    0x714037,     27,   20,    0xa47867,     28,   20,    0xb4a599,     29,   20,    0x333538,     30,   20,    0x2a2728,     31,   20,    0x6f5142,     32,   20,    0x5d4038,     33,   20,    0x58403a,     34,   20,    0x1e1211,     35,   20,    0x0c0908,
     10,   21,    0xb4514d,     11,   21,    0xb36d5e,     12,   21,    0xdaab9c,     13,   21,    0xe0aa9b,     14,   21,    0xa88275,     15,   21,    0xd39b87,     16,   21,    0xdba08d,     17,   21,    0xd49a86,     18,   21,    0xd4947f,     19,   21,    0xd1927e,     20,   21,    0xc08671,     21,   21,    0xc29b92,     22,   21,    0xbd9283,     23,   21,    0xbc9080,     24,   21,    0xaf8676,     25,   21,    0xa37466,     26,   21,    0xa27862,     27,   21,    0x9b6f5c,     28,   21,    0x694c46,     29,   21,    0xc48679,     30,   21,    0x111113,     31,   21,    0x261d1b,     32,   21,    0x332423,     33,   21,    0x3f2b24,     34,   21,    0x96534a,     35,   21,    0x746d65,
     10,   22,    0xc77b69,     11,   22,    0xb44d47,     12,   22,    0xfad5c3,     13,   22,    0xe7b9a7,     14,   22,    0xdcac97,     15,   22,    0xdca898,     16,   22,    0xe2a998,     17,   22,    0xd79a88,     18,   22,    0xd3917f,     19,   22,    0xd69381,     20,   22,    0xcd8b7b,     21,   22,    0xc98a78,     22,   22,    0x8c6b5f,     23,   22,    0xac8475,     24,   22,    0xa77768,     25,   22,    0xb28570,     26,   22,    0xbb8775,     27,   22,    0xae8f7e,     28,   22,    0xc28677,     29,   22,    0xda9a8a,     30,   22,    0x7f544d,     31,   22,    0x88614f,     32,   22,    0x724540,     33,   22,    0x1f1314,     34,   22,    0x2e2425,     35,   22,    0x86807b,
     10,   23,    0xc57264,     11,   23,    0xb8685c,     12,   23,    0xfdd8c7,     13,   23,    0xe9c6bc,     14,   23,    0xddaca0,     15,   23,    0xd7a294,     16,   23,    0xe0a89a,     17,   23,    0xd99b8a,     18,   23,    0xdb9a8a,     19,   23,    0xd59687,     20,   23,    0xd19382,     21,   23,    0xcd887a,     22,   23,    0xc48474,     23,   23,    0xb97a6b,     24,   23,    0x9a6456,     25,   23,    0x7f5249,     26,   23,    0x7b5147,     27,   23,    0xbd8372,     28,   23,    0xd89785,     29,   23,    0xd59584,     30,   23,    0xab7468,     31,   23,    0x926659,     32,   23,    0x8d6655,     33,   23,    0x3a383a,     34,   23,    0x56595b,
     10,   24,    0xca7469,     11,   24,    0xc37d6e,     12,   24,    0xf9dad3,     13,   24,    0xf1d5d0,     14,   24,    0xd7aa9f,     15,   24,    0xd59d90,     16,   24,    0xdda89c,     17,   24,    0xd19382,     18,   24,    0xd29280,     19,   24,    0xd89986,     20,   24,    0xd49583,     21,   24,    0xd39382,     22,   24,    0xd29384,     23,   24,    0xcb907e,     24,   24,    0xc18674,     25,   24,    0xbc816f,     26,   24,    0xc18975,     27,   24,    0xc8897b,     28,   24,    0xcd8c7b,     29,   24,    0xd69785,     30,   24,    0xbc8371,     31,   24,    0x8d6958,     32,   24,    0x856053,     33,   24,    0x4d4e4d,     34,   24,    0x7e7978,
     10,   25,    0xe4ada4,     11,   25,    0xc97e71,     12,   25,    0xfeede8,     13,   25,    0xe3c3ba,     14,   25,    0xd7a397,     15,   25,    0xdba597,     16,   25,    0xf4c3b5,     17,   25,    0xd79c8a,     18,   25,    0xd79484,     19,   25,    0x46332d,     20,   25,    0x432e2a,     21,   25,    0xd49384,     22,   25,    0xd09385,     23,   25,    0xc98d81,     24,   25,    0xbc8070,     25,   25,    0xb67c6b,     26,   25,    0xbf786a,     27,   25,    0xd49282,     28,   25,    0xcd8f7d,     29,   25,    0xd99e8e,     30,   25,    0xbe8376,     31,   25,    0x96645a,     32,   25,    0x8c5e4e,     33,   25,    0x3f2f2b,
     11,   26,    0xc58378,     12,   26,    0xfbf2ec,     13,   26,    0xf4d2c9,     14,   26,    0xddaea3,     15,   26,    0xddaf9e,     16,   26,    0xddad9e,     17,   26,    0xcf9582,     18,   26,    0xca907c,     19,   26,    0xd19683,     20,   26,    0x442f2b,     21,   26,    0x44302c,     22,   26,    0x3f2e2b,     23,   26,    0xc58a7c,     24,   26,    0xb57b67,     25,   26,    0xab6b61,     26,   26,    0xc78273,     27,   26,    0xd79887,     28,   26,    0xcf9080,     29,   26,    0xd4998a,     30,   26,    0xc1867b,     31,   26,    0xae7c6e,     32,   26,    0x342521,     33,   26,    0x261d1b,
     11,   27,    0xf5d0c7,     12,   27,    0xfcece5,     13,   27,    0xf1d5c9,     14,   27,    0xf5cfc6,     15,   27,    0xe3b9ad,     16,   27,    0xd0a092,     17,   27,    0xc68979,     18,   27,    0xca917d,     19,   27,    0xc98e7c,     20,   27,    0x3e2b28,     21,   27,    0x382724,     22,   27,    0x3b2a27,     23,   27,    0x382620,     24,   27,    0x3b2a27,     25,   27,    0xb07866,     26,   27,    0xb67a6d,     27,   27,    0x8a4f48,     28,   27,    0xa1675e,     29,   27,    0xb18071,     30,   27,    0xa17464,     31,   27,    0x3a2a26,     32,   27,    0x382824,
     11,   28,    0xf4dbce,     12,   28,    0xf5ddd2,     13,   28,    0xe5c4ba,     14,   28,    0xffe9dc,     15,   28,    0xf7d8cc,     16,   28,    0xe2b5a8,     17,   28,    0xc38a76,     18,   28,    0xbe8671,     19,   28,    0xc18a76,     20,   28,    0xb88174,     21,   28,    0x352521,     22,   28,    0x352621,     23,   28,    0x362824,     24,   28,    0x362721,     25,   28,    0x392825,     26,   28,    0x382926,     27,   28,    0x382825,     28,   28,    0x30211f,     29,   28,    0x281b1a,     30,   28,    0x30231f,     31,   28,    0x382825,     32,   28,    0x362723,
     11,   29,    0xfde6dc,     12,   29,    0xeed1c7,     13,   29,    0xe3bcb2,     14,   29,    0xfbe0d7,     15,   29,    0xe5c9bd,     16,   29,    0xe0b1a3,     17,   29,    0xbf8674,     18,   29,    0xb78272,     19,   29,    0xb07a6d,     20,   29,    0xab7a66,     21,   29,    0xa07363,     22,   29,    0x96715e,     23,   29,    0x30231f,     24,   29,    0x352822,     25,   29,    0x362724,     26,   29,    0x392825,     27,   29,    0xae7a6c,     28,   29,    0xa27367,     29,   29,    0x291e1d,     30,   29,    0x30221e,     31,   29,    0x9a6f5e,     32,   29,    0x9f7262,
     11,   30,    0xfae6e0,     12,   30,    0xf8dfd6,     13,   30,    0xdcb9ab,     14,   30,    0xebcac0,     15,   30,    0xfcddd4,     16,   30,    0xebc1b5,     17,   30,    0xbe8573,     18,   30,    0xb47f6e,     19,   30,    0xab7a69,     20,   30,    0xb17e71,     21,   30,    0xaa7a67,     22,   30,    0x885d49,     23,   30,    0x6c3c34,     24,   30,    0x90564b,     25,   30,    0xa76861,     26,   30,    0xa9665f,     27,   30,    0xa8685f,     28,   30,    0xac7362,     29,   30,    0x98685e,     30,   30,    0x856357,     31,   30,    0x8f6856,     32,   30,    0x976e5d,
     11,   31,    0xfef1ed,     12,   31,    0xfce2d5,     13,   31,    0xd7b09f,     14,   31,    0xd2aca0,     15,   31,    0xf1cbbb,     16,   31,    0xe7c3b3,     17,   31,    0xc89183,     18,   31,    0xb68372,     19,   31,    0xaf7f70,     20,   31,    0xaa7968,     21,   31,    0xa67461,     22,   31,    0xa5705c,     23,   31,    0xb8816f,     24,   31,    0xaa6a5f,     25,   31,    0xa4675e,     26,   31,    0x985156,     27,   31,    0x7e393b,     28,   31,    0x763c3c,     29,   31,    0x613532,     30,   31,    0x9b7159,     31,   31,    0x94715e,
     11,   32,    0xf4dbcf,     12,   32,    0xfee1d5,     13,   32,    0xc99f8f,     14,   32,    0xbe9887,     15,   32,    0xe0beaa,     16,   32,    0xe0bda8,     17,   32,    0xb78274,     18,   32,    0xb17c6f,     19,   32,    0xaf7a6b,     20,   32,    0xaa7a66,     21,   32,    0x9c6f5a,     22,   32,    0xaa7361,     23,   32,    0xb68170,     24,   32,    0xb98773,     25,   32,    0xb07769,     26,   32,    0xaf6f6a,     27,   32,    0xa56563,     28,   32,    0x9c605e,     29,   32,    0x774a41,     30,   32,    0xa87e66,     31,   32,    0x906f5c,
      9,   33,    0xe1e8f4,     10,   33,    0xeaf0fd,     11,   33,    0xc9cad3,     12,   33,    0xf3ccbd,     13,   33,    0xd5a899,     14,   33,    0xb08677,     15,   33,    0xb7907d,     16,   33,    0xd3ae9c,     17,   33,    0xb38476,     18,   33,    0xa57566,     19,   33,    0xa17262,     20,   33,    0x9e7060,     21,   33,    0xa07564,     22,   33,    0xa77a67,     23,   33,    0xb6826b,     24,   33,    0xb5816a,     25,   33,    0xad7c6b,     26,   33,    0x9b6e60,     27,   33,    0x8b6255,     28,   33,    0x906a58,     29,   33,    0x8c6b57,     30,   33,    0x906b58,
      8,   34,    0xffffff,      9,   34,    0xffffff,     10,   34,    0xc7ceda,     11,   34,    0xd9e0f2,     12,   34,    0xb9bac2,     13,   34,    0xd2a89b,     14,   34,    0xa97e6d,     15,   34,    0x9b7563,     16,   34,    0xac8774,     17,   34,    0xb18574,     18,   34,    0xa37666,     19,   34,    0x9f725f,     20,   34,    0x9e7461,     21,   34,    0xa17762,     22,   34,    0x9e7966,     23,   34,    0xa47b6a,     24,   34,    0xb98775,     25,   34,    0xb88574,     26,   34,    0xa7776a,     27,   34,    0x956757,     28,   34,    0x946c5a,     29,   34,    0x80604f,
      7,   35,    0xffffff,      8,   35,    0xffffff,      9,   35,    0xfffeff,     10,   35,    0xb2b6c3,     11,   35,    0xc5cbdd,     12,   35,    0xbbc3d0,     13,   35,    0xa9b1bf,     14,   35,    0xad8877,     15,   35,    0x906a59,     16,   35,    0xab8573,     17,   35,    0xb08979,     18,   35,    0xa17765,     19,   35,    0xa7816c,     20,   35,    0x9d7260,     21,   35,    0xa47967,     22,   35,    0x9c7661,     23,   35,    0xa47f6c,     24,   35,    0xa97e6d,     25,   35,    0xb48071,     26,   35,    0xab7b68,     27,   35,    0xa17565,     28,   35,    0x896554,     29,   35,    0x7e6264,
      7,   36,    0xffffff,      8,   36,    0xffffff,      9,   36,    0xfbf6fc,     10,   36,    0xf7f2f5,     11,   36,    0xb5b6c3,     12,   36,    0xb6becb,     13,   36,    0xb2b8c9,     14,   36,    0xa8b0bf,     15,   36,    0x786d67,     16,   36,    0x916857,     17,   36,    0xa77e6d,     18,   36,    0xa07867,     19,   36,    0xa17663,     20,   36,    0xa27c69,     21,   36,    0x9d7564,     22,   36,    0x8f6e5e,     23,   36,    0x8f6e5d,     24,   36,    0x997465,     25,   36,    0xa77b68,     26,   36,    0x95695e,     27,   36,    0x926b5b,     28,   36,    0x7f6761,
      5,   37,    0xf7f1f1,      6,   37,    0x525255,      7,   37,    0xfef7fc,      8,   37,    0xfef9ff,      9,   37,    0xf6eef7,     10,   37,    0xf9f4fa,     11,   37,    0xf0f0f5,     12,   37,    0xb2b9c9,     13,   37,    0xb2bbcb,     14,   37,    0xb0bfd0,     15,   37,    0xaebbce,     16,   37,    0xa6afbb,     17,   37,    0x826357,     18,   37,    0x936e5e,     19,   37,    0x947062,     20,   37,    0x9a7362,     21,   37,    0x97715e,     22,   37,    0x8d6c5e,     23,   37,    0x896758,     24,   37,    0x7d6255,     25,   37,    0x7e6153,     26,   37,    0x7d5d51,     27,   37,    0x7e6760,
      4,   38,    0xf6f2f7,      5,   38,    0x4d4c50,      6,   38,    0xfdf9fc,      7,   38,    0xf9f4fa,      8,   38,    0xfffeff,      9,   38,    0xfbf6fc,     10,   38,    0xf9f4f8,     11,   38,    0xf5ecf1,     12,   38,    0xb2bbcc,     13,   38,    0xb2bdd2,     14,   38,    0xadbccf,     15,   38,    0xafbed1,     16,   38,    0xb0bfd2,     17,   38,    0xa8b2c1,     18,   38,    0x4d3c3a,     19,   38,    0x926e5c,     20,   38,    0x93705e,     21,   38,    0x926f5d,     22,   38,    0x95715e,     23,   38,    0x906d5a,     24,   38,    0x91705d,     25,   38,    0x8b685c,     26,   38,    0x816255,
      2,   39,    0xffffff,      3,   39,    0xffffff,      4,   39,    0x525155,      5,   39,    0x4f4e52,      6,   39,    0xedebf2,      7,   39,    0xf9f6f8,      8,   39,    0xfbf6fc,      9,   39,    0xfbf5f8,     10,   39,    0xfaf5fb,     11,   39,    0xf2edf4,     12,   39,    0xeeecf2,     13,   39,    0xb0bfd5,     14,   39,    0xaebdd2,     15,   39,    0xb0bfd2,     16,   39,    0xadbed0,     17,   39,    0xadbed0,     18,   39,    0xadbccf,     19,   39,    0xa3afbd,     20,   39,    0x392421,     21,   39,    0x725147,     22,   39,    0x846559,     23,   39,    0x8b6a5b,     24,   39,    0x86675a,     25,   39,    0x3d323b,     26,   39,    0x534e55,
      2,   40,    0xffffff,      3,   40,    0xffffff,      4,   40,    0x525255,      5,   40,    0xebe6ec,      6,   40,    0xe6e3ea,      7,   40,    0xf5f0f6,      8,   40,    0xf2eff6,      9,   40,    0xf0edf5,     10,   40,    0xf3f2f5,     11,   40,    0xf0eaf4,     12,   40,    0xeeebf2,     13,   40,    0xf0edf4,     14,   40,    0xacbed0,     15,   40,    0xb2bfd2,     16,   40,    0xaebdd0,     17,   40,    0xabbcce,     18,   40,    0xb1c2d6,     19,   40,    0xb3c2d8,     20,   40,    0xaab8ca,     21,   40,    0x878684,     22,   40,    0x6a493d,     23,   40,    0x826050,     24,   40,    0x291c1d,     25,   40,    0x4a474c,     26,   40,    0x565358,     27,   40,    0x6f727d,
      0,   41,    0xffffff,      1,   41,    0xfeffff,      2,   41,    0xffffff,      3,   41,    0xffffff,      4,   41,    0x525255,      5,   41,    0xfcf7fd,      6,   41,    0xdddfe0,      7,   41,    0xf4eff5,      8,   41,    0xf7f6fb,      9,   41,    0xffffff,     10,   41,    0xf4f3fb,     11,   41,    0xeeedf3,     12,   41,    0xeceaf1,     13,   41,    0xeeebf2,     14,   41,    0x96a2b4,     15,   41,    0xb0bdd0,     16,   41,    0xaebcd0,     17,   41,    0xafbcd2,     18,   41,    0xacbdce,     19,   41,    0xb0bfd6,     20,   41,    0xb3c1d9,     21,   41,    0xaab9ce,     22,   41,    0x858688,     23,   41,    0x7f594e,     24,   41,    0x2b2f36,     25,   41,    0x504855,     26,   41,    0x55545c,     27,   41,    0x6b6f78,     28,   41,    0x828895,
      0,   42,    0xffffff,      1,   42,    0xffffff,      2,   42,    0xffffff,      3,   42,    0xffffff,      4,   42,    0x525255,      5,   42,    0xfffeff,      6,   42,    0xf0ecf3,      7,   42,    0xebe4ec,      8,   42,    0xf4eff5,      9,   42,    0xf5f2f8,     10,   42,    0xeeebf2,     11,   42,    0xfaf6fe,     12,   42,    0xf1edf4,     13,   42,    0xf0ecf4,     14,   42,    0xedeaf1,     15,   42,    0x9dadc3,     16,   42,    0xabbccc,     17,   42,    0xabbdce,     18,   42,    0xabbcce,     19,   42,    0xafc0d2,     20,   42,    0xb3c3d9,     21,   42,    0xb4c3da,     22,   42,    0x95a7ba,     23,   42,    0x879ab8,     24,   42,    0x464855,     25,   42,    0x585d68,     26,   42,    0x666a76,     27,   42,    0x7a7c87,     28,   42,    0x414e66,     29,   42,    0xe3e2e6,
      0,   43,    0xffffff,      1,   43,    0xfefef9,      2,   43,    0xffffff,      3,   43,    0xfbf9fd,      4,   43,    0x515054,      5,   43,    0xf8f4fa,      6,   43,    0xf1eef5,      7,   43,    0xefeaf0,      8,   43,    0xf3f0f7,      9,   43,    0xf1f0f7,     10,   43,    0xefecf1,     11,   43,    0xf9f4fd,     12,   43,    0xece8f0,     13,   43,    0xe4e1e8,     14,   43,    0xf0edf4,     15,   43,    0xdfdee5,     16,   43,    0xa3b0c7,     17,   43,    0xabbcce,     18,   43,    0xaabbcd,     19,   43,    0xb0c1d1,     20,   43,    0xb3c3d5,     21,   43,    0xb4c4db,     22,   43,    0xafb6b2,     23,   43,    0x95a4ba,     24,   43,    0x9cadc6,     25,   43,    0x636977,     26,   43,    0x70778a,     27,   43,    0x8990a0,     28,   43,    0x939eb7,     29,   43,    0xe3e0e7,     30,   43,    0xdedbe2,     31,   43,    0xe2dee4,
      0,   44,    0xf8f8f9,      1,   44,    0xfdfdff,      2,   44,    0xfffefd,      3,   44,    0xf6f7f8,      4,   44,    0x505054,      5,   44,    0xf6f4f6,      6,   44,    0xf0f0f3,      7,   44,    0xf2eaf3,      8,   44,    0xe4e4eb,      9,   44,    0xf1f0f7,     10,   44,    0xf8f5fc,     11,   44,    0xf4f0f8,     12,   44,    0xebe8ef,     13,   44,    0xedeaf1,     14,   44,    0xf1eef5,     15,   44,    0xe9e5ed,     16,   44,    0x8b929e,     17,   44,    0xacbfcf,     18,   44,    0xadbed0,     19,   44,    0xafc0d2,     20,   44,    0xb0bfd0,     21,   44,    0x647b9b,     22,   44,    0x7a89a4,     23,   44,    0x90a6c5,     24,   44,    0x9eb1ce,     25,   44,    0x727e95,     26,   44,    0x737b8e,     27,   44,    0x7c88a0,     28,   44,    0x98a7bc,     29,   44,    0x4a494d,     30,   44,    0xe1dee5,     31,   44,    0xdad9df,
      0,   45,    0xfcffff,      1,   45,    0xfcfcff,      2,   45,    0xffffff,      3,   45,    0xf6f7f9,      4,   45,    0x515154,      5,   45,    0xf8f1fb,      6,   45,    0xf4f0fa,      7,   45,    0xeeebf0,      8,   45,    0xe6e2e9,      9,   45,    0xd4d3d9,     10,   45,    0xc4c4c7,     11,   45,    0xeae7ee,     12,   45,    0xeae7ee,     13,   45,    0xf0eef5,     14,   45,    0xe9e5ec,     15,   45,    0xe5e5ec,     16,   45,    0xe8e7ed,     17,   45,    0xa3b2c5,     18,   45,    0xafbfd1,     19,   45,    0xb2c1d3,     20,   45,    0x586a83,     21,   45,    0x7183a0,     22,   45,    0x899dbe,     23,   45,    0x8ea3c2,     24,   45,    0x7c889e,     25,   45,    0x7e8aa2,     26,   45,    0x75809c,     27,   45,    0x7c88a1,     28,   45,    0xdadfe9,     29,   45,    0x494c4d,     30,   45,    0x48494e,     31,   45,    0xdbdadf,     32,   45,    0xe1dde6,
      0,   46,    0xfbfdfe,      1,   46,    0xf3f4f6,      2,   46,    0xf4f5f7,      3,   46,    0xeeedf3,      4,   46,    0x4e4e52,      5,   46,    0xf6f4f6,      6,   46,    0xfbfbfd,      7,   46,    0xf4f5f7,      8,   46,    0xe9e6ed,      9,   46,    0xe1dde5,     10,   46,    0xe3dfe4,     11,   46,    0xece9f0,     12,   46,    0xeae7ee,     13,   46,    0xe4e1e8,     14,   46,    0xf1edf7,     15,   46,    0xefecf3,     16,   46,    0xe8e5ec,     17,   46,    0xe5e3eb,     18,   46,    0xadbdcf,     19,   46,    0x5f3643,     20,   46,    0x7b93af,     21,   46,    0x637896,     22,   46,    0x7f92b1,     23,   46,    0x9badca,     24,   46,    0x78849b,     25,   46,    0x78859d,     26,   46,    0x818faa,     27,   46,    0x9db2ca,     28,   46,    0xdddbe2,     29,   46,    0xe2dde4,     30,   46,    0x484a4f,     31,   46,    0x4a494e,     32,   46,    0xded9e3,
      0,   47,    0xf5f6f9,      1,   47,    0xfdfefd,      2,   47,    0xf6f7f9,      3,   47,    0xfbfdfc,      4,   47,    0x525255,      5,   47,    0xf9fafc,      6,   47,    0xf6f4fb,      7,   47,    0xeceaf0,      8,   47,    0xf3f0f7,      9,   47,    0xe9e7ee,     10,   47,    0xf0edf5,     11,   47,    0xefecf3,     12,   47,    0xeeebf2,     13,   47,    0xf5f3fa,     14,   47,    0xeae7ee,     15,   47,    0xebebf2,     16,   47,    0xece9f0,     17,   47,    0xe4e1e8,     18,   47,    0x778699,     19,   47,    0x8094ad,     20,   47,    0x71404d,     21,   47,    0x6a3d4f,     22,   47,    0x607797,     23,   47,    0x889cbb,     24,   47,    0x6a7284,     25,   47,    0x7c8a9e,     26,   47,    0x93a1b9,     27,   47,    0x7a4350,     28,   47,    0xd7d4db,     29,   47,    0xe2dfe6,     30,   47,    0xe6e6ec,     31,   47,    0x484b4f,     32,   47,    0xe2dfe4,     33,   47,    0xe0dde4,     34,   47,    0xc4c7c7,
      0,   48,    0xf9fbfe,      1,   48,    0xfcfdfe,      2,   48,    0xefeef0,      3,   48,    0xf2f3f5,      4,   48,    0xf2f2f4,      5,   48,    0x505053,      6,   48,    0xf0f2f4,      7,   48,    0xefecf3,      8,   48,    0xefeaf1,      9,   48,    0xebe8ef,     10,   48,    0xf4f0f8,     11,   48,    0xefecf3,     12,   48,    0xf2edf6,     13,   48,    0xfbf8ff,     14,   48,    0xece9f0,     15,   48,    0xebe7ee,     16,   48,    0xf4f1f8,     17,   48,    0xeeebf1,     18,   48,    0xe3e1e7,     19,   48,    0x8297ae,     20,   48,    0x8da2ba,     21,   48,    0x6c3d4d,     22,   48,    0x5f394d,     23,   48,    0x6d3b4e,     24,   48,    0x63363f,     25,   48,    0x6b3946,     26,   48,    0x693844,     27,   48,    0x4c2931,     28,   48,    0xdfdde3,     29,   48,    0xe2dfe5,     30,   48,    0xe2dfe6,     31,   48,    0x4b4b4f,     32,   48,    0x4a494d,     33,   48,    0xe1e1e8,     34,   48,    0xcbc9cb,
      0,   49,    0xf2f4f6,      1,   49,    0xf6f7fb,      2,   49,    0xeeeff1,      3,   49,    0xebf0f3,      4,   49,    0xf0eef3,      5,   49,    0x4c4c50,      6,   49,    0xefeef0,      7,   49,    0xebecee,      8,   49,    0xedecf2,      9,   49,    0xe8e5ec,     10,   49,    0xebe6ec,     11,   49,    0xfcf8ff,     12,   49,    0xece8f0,     13,   49,    0xe8e6ee,     14,   49,    0xebeaef,     15,   49,    0xe7e4eb,     16,   49,    0xe7e5eb,     17,   49,    0xedeaf1,     18,   49,    0xece9f0,     19,   49,    0xedeaf1,     20,   49,    0x8d9fb5,     21,   49,    0x92a7c0,     22,   49,    0x714151,     23,   49,    0x5e3646,     24,   49,    0x663541,     25,   49,    0x653844,     26,   49,    0x783f4b,     27,   49,    0x703b48,     28,   49,    0xd2d6dc,     29,   49,    0xdedbe2,     30,   49,    0xe7e1e8,     31,   49,    0xe2dfe6,     32,   49,    0x4a4a4f,     33,   49,    0xe2e1e7,     34,   49,    0xd2d0d4,     35,   49,    0xc5c7c5,
      0,   50,    0xf1f2f4,      1,   50,    0xf0f2f2,      2,   50,    0xf2f3f4,      3,   50,    0xe6ecef,      4,   50,    0xf1f3f4,      5,   50,    0xebecee,      6,   50,    0x4d4f53,      7,   50,    0xeeedf1,      8,   50,    0xe7ebe8,      9,   50,    0xefeff3,     10,   50,    0xebe8ef,     11,   50,    0xefeaf0,     12,   50,    0xece9f0,     13,   50,    0xebe5ec,     14,   50,    0xe8e8ef,     15,   50,    0xece6f0,     16,   50,    0xe9e6ed,     17,   50,    0xedeaf1,     18,   50,    0xe5e2e6,     19,   50,    0xe6e1eb,     20,   50,    0x97a5b6,     21,   50,    0x93a3bb,     22,   50,    0x7c4252,     23,   50,    0x4c2d39,     24,   50,    0x6b3a47,     25,   50,    0x723e49,     26,   50,    0x723e49,     27,   50,    0x93a2b6,     28,   50,    0xffffff,     29,   50,    0xe4e4e9,     30,   50,    0xe1dde4,     31,   50,    0xe2dfe6,     32,   50,    0x4b4a4f,     33,   50,    0x494b4f,     34,   50,    0xc9c9ca,     35,   50,    0xc5c5c5,     36,   50,    0xc4c1c5,
      0,   51,    0xf3f4f6,      1,   51,    0xecedee,      2,   51,    0xeceef1,      3,   51,    0xebedef,      4,   51,    0xedeef0,      5,   51,    0x4d4d4f,      6,   51,    0x4c4c4f,      7,   51,    0x4c4c50,      8,   51,    0x4e4e51,      9,   51,    0x4b4b4f,     10,   51,    0xefeaf3,     11,   51,    0xede9f0,     12,   51,    0xe7e3eb,     13,   51,    0xf7f4fb,     14,   51,    0xe8e7ed,     15,   51,    0xe9e4ed,     16,   51,    0xece8f0,     17,   51,    0xf5f2f9,     18,   51,    0xefecf3,     19,   51,    0xe6e5eb,     20,   51,    0xe0dfe4,     21,   51,    0x96a4bb,     22,   51,    0x91a1b8,     23,   51,    0x603644,     24,   51,    0x703c4a,     25,   51,    0x7d4450,     26,   51,    0x8fa0b6,     27,   51,    0x8e9ead,     28,   51,    0x7c8d9d,     29,   51,    0xd3d2db,     30,   51,    0xd9d8dd,     31,   51,    0xdfdae2,     32,   51,    0xe1dee5,     33,   51,    0x4b4a4f,     34,   51,    0xe5e2e9,     35,   51,    0xc7c6c6,     36,   51,    0xc6c6c6,     37,   51,    0xc5c4c7,
      0,   52,    0xf3f1f5,      1,   52,    0xebecee,      2,   52,    0xf1f2f4,      3,   52,    0xeeeff1,      4,   52,    0xedeef0,      5,   52,    0x4c4c51,      6,   52,    0xebebed,      7,   52,    0xededef,      8,   52,    0xededef,      9,   52,    0x4c4c51,     10,   52,    0x4a4a4d,     11,   52,    0xededef,     12,   52,    0xe4e4e5,     13,   52,    0xe2dfe6,     14,   52,    0xefeef3,     15,   52,    0xebe8ef,     16,   52,    0xe9e5ed,     17,   52,    0xf0edf6,     18,   52,    0xeee7f2,     19,   52,    0xeeeaf1,     20,   52,    0xe7e4ea,     21,   52,    0xfeffff,     22,   52,    0x96a6bd,     23,   52,    0x91a2bb,     24,   52,    0x7e4451,     25,   52,    0x824653,     26,   52,    0x864856,     27,   52,    0x9eaec3,     28,   52,    0x7c8b95,     29,   52,    0xffffff,     30,   52,    0xdddbe0,     31,   52,    0xe1dee5,     32,   52,    0xe0dde6,     33,   52,    0x4b4a4f,     34,   52,    0x4b4f50,     35,   52,    0xc8c8c8,     36,   52,    0xc5c9c8,     37,   52,    0xc9c9cb,
      0,   53,    0xf5f6f8,      1,   53,    0xfbfeff,      2,   53,    0xebecec,      3,   53,    0xf2f2f4,      4,   53,    0xe9eaec,      5,   53,    0x4d4d51,      6,   53,    0xe2e2e5,      7,   53,    0xf0f0f2,      8,   53,    0xedeef0,      9,   53,    0xedecef,     10,   53,    0x4c4c4f,     11,   53,    0x4c4c50,     12,   53,    0xe2e1e5,     13,   53,    0xe2e2e4,     14,   53,    0xd5d7d7,     15,   53,    0xe7e7ee,     16,   53,    0xe5e2e9,     17,   53,    0xe9e6ed,     18,   53,    0xeae7ee,     19,   53,    0xe6e3ea,     20,   53,    0xefebf1,     21,   53,    0xe8e7ee,     22,   53,    0x99aabe,     23,   53,    0x8a9bb5,     24,   53,    0x97a9bd,     25,   53,    0x7f4551,     26,   53,    0x7e4450,     27,   53,    0x864852,     28,   53,    0x9da9b9,     29,   53,    0xffffff,     30,   53,    0xe5e4eb,     31,   53,    0xe1dee5,     32,   53,    0xe0dae4,     33,   53,    0xe7e4eb,     34,   53,    0x4c4b50,     35,   53,    0xcccccc,     36,   53,    0xc9c9cb,     37,   53,    0xc8c9cb,
      0,   54,    0xeff0f2,      1,   54,    0xe7e9ea,      2,   54,    0xe5e5e7,      3,   54,    0xe9e9eb,      4,   54,    0xedf0f2,      5,   54,    0x4b4c4f,      6,   54,    0x4d4d51,      7,   54,    0xede9f1,      8,   54,    0xf3f0f4,      9,   54,    0xe6e4e6,     10,   54,    0xececee,     11,   54,    0x4e4e51,     12,   54,    0xebebec,     13,   54,    0xe6e6e8,     14,   54,    0xe7e6e8,     15,   54,    0xd5d4d7,     16,   54,    0xf2f3f5,     17,   54,    0xedeaf1,     18,   54,    0xe7e4eb,     19,   54,    0xeeebf2,     20,   54,    0xeae7ee,     21,   54,    0xe5e2e8,     22,   54,    0xfffffe,     23,   54,    0x9ba7bf,     24,   54,    0xa2b0ca,     25,   54,    0x7d4351,     26,   54,    0x7d434f,     27,   54,    0x80454f,     28,   54,    0xa1b0c3,     29,   54,    0x97a5b5,     30,   54,    0xd8d6dd,     31,   54,    0xded6e2,     32,   54,    0xe2dfe6,     33,   54,    0xe4e1eb,     34,   54,    0x4d4c51,     35,   54,    0xd5d7d5,     36,   54,    0xcfcfd1,     37,   54,    0xc6c6c8,
      0,   55,    0xe8e7ec,      1,   55,    0xf1f2f4,      2,   55,    0xf0f0f2,      3,   55,    0xe9e9eb,      4,   55,    0xe9e9eb,      5,   55,    0xeeeeee,      6,   55,    0x4b4c4f,      7,   55,    0xe2e3e4,      8,   55,    0xe4e3e8,      9,   55,    0xe7e7e9,     10,   55,    0xe3e2e5,     11,   55,    0x4f4f53,     12,   55,    0x4c4c50,     13,   55,    0xe6e6e7,     14,   55,    0xe5e7e9,     15,   55,    0xeaeaee,     16,   55,    0xdddddf,     17,   55,    0xefeff1,     18,   55,    0xe5e6ea,     19,   55,    0xe5e6e7,     20,   55,    0xedeef2,     21,   55,    0xe5e2e9,     22,   55,    0xe4e1e8,     23,   55,    0x9aa9b8,     24,   55,    0xa7b7cf,     25,   55,    0x824653,     26,   55,    0x804451,     27,   55,    0x7b414b,     28,   55,    0x7e444f,     29,   55,    0x9aaabd,     30,   55,    0xffffff,     31,   55,    0xdddae0,     32,   55,    0xe1dee5,     33,   55,    0xe5e3e9,     34,   55,    0x4c4d50,     35,   55,    0xd4d4d4,     36,   55,    0xd2d4d3,     37,   55,    0xc6c6c8,
      0,   56,    0xe9e8ed,      1,   56,    0xe4e4e6,      2,   56,    0xebe9ec,      3,   56,    0xe9e8ea,      4,   56,    0xe7e7e9,      5,   56,    0xebe9eb,      6,   56,    0x4d4d50,      7,   56,    0x4a4a4d,      8,   56,    0xe4e6e8,      9,   56,    0xe8eaea,     10,   56,    0xe7e6eb,     11,   56,    0xececf0,     12,   56,    0x4c4c50,     13,   56,    0xe7e5e8,     14,   56,    0xedeef0,     15,   56,    0xe5e4e6,     16,   56,    0xe3e3e5,     17,   56,    0xe6e5eb,     18,   56,    0xebebea,     19,   56,    0xe5e5e4,     20,   56,    0xe7e7e9,     21,   56,    0xe1e5e7,     22,   56,    0xe8e8ea,     23,   56,    0xe0e1df,     24,   56,    0xe0e9ff,     25,   56,    0x94a4b8,     26,   56,    0x7f4350,     27,   56,    0x7f424f,     28,   56,    0x763f49,     29,   56,    0x7d434f,     30,   56,    0x8495a2,     31,   56,    0xe6e5e6,     32,   56,    0xdedee0,     33,   56,    0xe0e2e2,     34,   56,    0xe0e2e4,     35,   56,    0x49484c,     36,   56,    0xd2d4d3,     37,   56,    0xc3c4c5,
DR_MARIO_ENGELS_SIZE: .word 1495
##############################################################################
# Mutable Data
##############################################################################
GRID:
    .space 28800 # 60 * 60 * 4
##############################################################################
# Code
##############################################################################
	

    .text
	.globl main

# Macro definitions
.macro SAVE_RA()
    sub $sp, $sp, 4
    sw $ra, 0($sp)
.end_macro

.macro RESTORE_RA()
    lw $ra, 0($sp)
    addi $sp, $sp, 4
.end_macro


##############################################################################
# MAIN 
##############################################################################

main:
    # Initialize grid and start the game loop.
    
    jal generate_block
    jal reset_timer
    jal initialize_grid
    
    # Set Viruses
    li $a0, 49
    li $a1, 55
    lw $a2, RED_COLOR
    jal set_virus
    
    li $a0, 31
    li $a1, 31
    lw $a2, BLUE_COLOR
    jal set_virus
    
    li $a0, 22
    li $a1, 46
    lw $a2, YELLOW_COLOR
    jal set_virus
    
    jal draw_jar
    
    li $a0, 60
    li $a1, 3
    la $a2, DR_MARIO_DATA
    lw $a3, DR_MARIO_SIZE
    jal draw_pixel_art
    
    li $a0, 70
    li $a1, 0
    la $a2, DR_MARIO_ENGELS_DATA
    lw $a3, DR_MARIO_ENGELS_SIZE
    jal draw_pixel_art
    
    jal draw_grid
    
    j game_loop

##############################################################################
# INITIALIZATION
##############################################################################

end:
    jr $ra

end_restore_ra:
    RESTORE_RA()
    jr $ra

initialize_grid:
    # Initialize the grid by setting the color of all pixels to be the 
    # predefined BACKGROUND_COLOR.

    la $t0, GRID            # Load grid address ($t0) into counter
    lw $t1, GRID_SIZE       # Lood grid size ($t1)
    add $t1, $t1, $t0       # Specify max index ($t1)
    lw $t2, PIXEL_SIZE      # Load pixel size ($t2)
    lw $t3, BACKGROUND_COLOR    # Load pixel color
    while_initialize_grid:
        bge $t0, $t1, end   # End loop if counter ($t0) >= max index ($t1)
        sw $t3, 0($t0)      # Save color into grid index 
        add $t0, $t0, $t2   # Increment counter by pixel size
        j while_initialize_grid

draw_grid:
    # Loop through each pixel in the grid and draw them to the display.
    
    la $t0, GRID            # Load grid address ($t0) into counter
    lw $t1, GRID_SIZE       # Lood grid size ($t1)
    add $t1, $t1, $t0       # Specify max index ($t1)
    lw $t2, PIXEL_SIZE      # Load pixel size ($t2)
    lw $t3, ADDR_DSPL       # Load display address ($t3) into counter
    while_draw_grid:
        bge $t0, $t1, end   # End loop if counter ($t0) >= max index ($t1)
        lw $t4, 0($t0)      # Load the color from the grid ($t4)
        sw $t4, 0($t3)      # Save color into display index 
        add $t0, $t0, $t2   # Increment grid counter by pixel size
        add $t3, $t3, $t2   # Increment display counter by pixel size
        j while_draw_grid

generate_block:
    # Generate a new 2x1 cell block at the middle top of the screen, 
    # with random colors the cells in each half.

    # Save $ra (in main after generate_block) and restore after random_color
    SAVE_RA()
    
    lw $t0 MAX_X
    lw $t1, MIN_X
    sub $t0, $t0, $t1
    div $t0, $t0, 2         # Halve the width into $t1
    add $t1, $t0, $t1
    lw $t2, CELL_SIZE
    div $t3, $t2, 2
    sub $t1, $t1, $t3       # To align with grid correctly
    add $t1, $t1, $t2
    sub $t0, $t1, $t2       # Subtract CELL_SIZE from $t1 into $t0
    # Initialize half #1 starting coordinates
    move $s0, $t0
    lw $s1, MIN_Y
    add $s1, $s1, $t3       # To align with grid correctly
    # Initialize half #1 starting color
    jal random_color
    move $s2, $v0
    # Initialize half #2 starting coordinates
    move $s3, $t1
    lw $s4, MIN_Y
    add $s4, $s4, $t3       # To align with grid correctly
    # initialize half #2 starting color
    jal random_color
    move $s5, $v0
    
    # Restore $ra (in main after generate_block) after random_color
    RESTORE_RA()
    jr $ra
    
random_color:
    # Generate a random color from RED_COLOR, YELLOW_COLOR, or 
    # BLUE_COLOR.
    # Returns:
    #   $v0: Randomly generated color

    # Generate random number from (0, 1, 2)
    li $v0, 42
    li $a0, 0
    li $a1, 3
    syscall
    
    beq $a0, 0, set_color_red
    beq $a0, 1, set_color_yellow
    beq $a0, 2, set_color_blue
    
    set_color_red:
        lw $v0, RED_COLOR
        jr $ra                  # Return to call in generate_block
    
    set_color_yellow:
        lw $v0, YELLOW_COLOR
        jr $ra                  # Return to call in generate_block
    
    set_color_blue:
        lw $v0, BLUE_COLOR
        jr $ra                  # Return to call in generate_block

##############################################################################
# JAR DRAWING
##############################################################################

draw_jar:
    # Draws the jar onto the grid, with the JAR_COLOR
    
    SAVE_RA()
    
    lw $a0, JAR_COLOR
    jal set_jar
    
    RESTORE_RA()
    jr $ra

highlight_jar:
    # Draws the jar onto the grid, with the CLEAR_COLOR
    
    SAVE_RA()
    
    lw $a0, JAR_HIGHLIGHT_COLOR
    jal set_jar
    
    RESTORE_RA()
    jr $ra

set_jar:
    # Draws the jar onto the grid with the specified color, based on the MIN_X, MIN_Y, MAX_X, and MAX_Y constants.
    # Args:
    #   $a0: color of the jar
    
    SAVE_RA()
    
    # Set jar color
    move $a2, $a0
    
    # Draw left side of jar
    lw $a0, MIN_X
    sub $a0, $a0, 1 
    lw $a1, MIN_Y
    sub $a1, $a1, 1
    lw $a3, MAX_Y
    sub $a3, $a1, $a3
    sub $a3, $a3, 2
    jal draw_line
    
    # Draw right side of jar
    lw $a0, MAX_X
    add $a0, $a0, 1 
    lw $a1, MIN_Y
    sub $a1, $a1, 1
    lw $a3, MAX_Y
    sub $a3, $a1, $a3
    sub $a3, $a3, 2
    jal draw_line
    
    # Draw bottom of jar
    lw $a0, MIN_X
    sub $a0, $a0, 1 
    lw $a1, MAX_Y
    add $a1, $a1, 1
    lw $a3, MAX_X
    sub $a3, $a3, $a0
    add $a3, $a3, 2
    jal draw_line
    
    # Draw left top of jar
    lw $a0, MIN_X
    sub $a0, $a0, 1 
    lw $a1, MIN_Y
    sub $a1, $a1, 1
    lw $a3, LID_MIN_X
    sub $a3, $a3, $a0
    # add $a3, $a3, 2
    jal draw_line
    
    # Draw right top of jar
    lw $a0, LID_MAX_X
    add $a0, $a0, 1 
    lw $a1, MIN_Y
    sub $a1, $a1, 1
    lw $a3, MAX_X
    sub $a3, $a3, $a0
    add $a3, $a3, 2
    jal draw_line
    
    # Draw left lid of jar
    lw $a0, LID_MIN_X
    sub $a0, $a0, 1 
    lw $a1, LID_MIN_Y
    sub $a1, $a1, 1
    lw $a3, MIN_Y
    sub $a3, $a1, $a3
    # sub $a3, $a3, 2
    jal draw_line
    
    # Draw right lid of jar
    lw $a0, LID_MAX_X
    add $a0, $a0, 1 
    lw $a1, LID_MIN_Y
    sub $a1, $a1, 1
    lw $a3, MIN_Y
    sub $a3, $a1, $a3
    # sub $a3, $a3, 2
    jal draw_line
    
    RESTORE_RA()
    jr $ra

draw_line:
    # Draws a vertical line from the specified coordinates to a length of a color.
    # Args:
    #   $a0: x-coordinate of the top left starting position
    #   $a1: y-coordinate of the top left starting position
    #   $a2: color of the line
    #   $a3: length of the line, in pixels, positive for a 
    #       horizontal line, negative for a vertical line
    
    blt $a3, 0, check_vertical_line
    li $t0, 1
    li $t1, 0
    j after_check_vertical_line
    check_vertical_line:
    li $t0, 0
    li $t1, 1
    sub $a3, $zero, $a3
    after_check_vertical_line:
    li $t2, 0                   # Initialize counter
    
    sub $sp, $sp, 16
    sw $ra, 0($sp)
    sw $t0, 4($sp)
    sw $t1, 8($sp)
    sw $t2, 12($sp)
    
    while_draw_line:
        bge $t2, $a3, end_draw_line
        
        jal set_pixel
        lw $t0, 4($sp)
        lw $t1, 8($sp)
        lw $t2, 12($sp)
        
        # Update coordinates
        add $a0, $a0, $t0
        add $a1, $a1, $t1
        
        # Increment counter
        add $t2, $t2, $t0
        add $t2, $t2, $t1
        sw $t2, 12($sp)
        
        j while_draw_line
    
    end_draw_line:
    lw $ra, 0($sp)
    addi $sp, $sp, 16
    jr $ra

##############################################################################
# PIXEL ART
##############################################################################

draw_pixel_art:
    # Draws a pixel art from a specified constant array.
    # Args:
    #   $a0: x-coordinate of top left of pixel art
    #   $a1: y-coordinate of top left of pixel art
    #   $a2: address of the constant array defining the pixel art
    #   $a3: length of the constant array, positive to draw, negative
    #       to clear
    
    blt $a3, 0, check_clear_pixel_art
    
    check_clear_pixel_art:
    
    
    move $t0, $a2
    li $t1, 0               # Initialize counter
    
    sub $sp, $sp, 20
    sw $ra, 0($sp)
    sw $t0, 4($sp)
    sw $t1, 8($sp)
    sw $a0, 12($sp)
    sw $a1, 16($sp)
    
    while_draw_pixel_art:
        bge $t1, $a3, end_draw_pixel_art
        lw $t3, 0($t0)
        add $a0, $a0, $t3
        lw $t4, 4($t0)
        add $a1, $a1, $t4
        lw $a2, 8($t0)
        jal set_pixel
        lw $t0, 4($sp)
        lw $t1, 8($sp)
        lw $a0, 12($sp)
        lw $a1, 16($sp)
        
        lw $t4, PIXEL_SIZE
        mult $t4, $t4, 3
        add $t0, $t0, $t4
        add $t1, $t1, 1
        sw $t0, 4($sp)
        sw $t1, 8($sp)
        
        j while_draw_pixel_art
    
    end_draw_pixel_art:
    lw $ra, 0($sp)
    addi $sp, $sp, 20
    jr $ra

##############################################################################
# GAME LOOP
##############################################################################

game_loop:
    # Game loop that repeatedly loops until the user quits or the game
    # ends.
    jal clear_block
    jal keyboard_input
    jal increment_timer
    jal update_block
    jal draw_grid
    
    j game_loop

##############################################################################
# DRAWING/CLEARING BLOCK
##############################################################################

update_block:
    # Draw the block at its currently set location.
    # Args:
    #   $s0: x-coordinate of half #1 of the block
    #   $s1: y-coordinate of half #1 of the block
    #   $s2: color of half #1 of the block
    #   $s3: x-coordinate of half #2 of the block
    #   $s4: y-coorindate of half #2 of the block
    #   $s5: color of half #2 of the block
    
    SAVE_RA()

    # Draw new pixel position
    li $a0, 1
    jal draw_block
    
    RESTORE_RA()
    jr $ra

clear_block:
    # Clear the block from its currently set location.
    # Args:
    #   $s0: x-coordinate of half #1 of the block
    #   $s1: y-coordinate of half #1 of the block
    #   $s3: x-coordinate of half #2 of the block
    #   $s4: y-coorindate of half #2 of the block

    # Save $ra (in game_loop after clear_block) before draw_block
    SAVE_RA()
    
    # Remove old block position
    li $a0, 0
    jal draw_block
    
    # Restore $ra (in game_loop after clear_block) after draw_block
    RESTORE_RA()
    jr $ra

draw_block:
    # Draw or clear the block at the its currently set location.
    # Args:
    #   $a0: 0 to clear or 1 to draw the block
    #   $s0: x-coordinate of half #1 of the block
    #   $s1: y-coordinate of half #1 of the block
    #   $s2: color of half #1 of the block
    #   $s3: x-coordinate of half #2 of the block
    #   $s4: y-coorindate of half #2 of the block
    #   $s5: color of half #2 of the block
    
    move $t0, $a0
    
    # Save $ra and $t0 before get_block_orientation
    sub $sp, $sp, 16
    sw $ra, 0($sp)
    sw $t0, 4($sp)
    
    jal get_block_orientation
    
    sw $v0, 8($sp)
    sw $v1, 12($sp)
    
    
    # Restore $t0 after get_block_orientation
    lw $t0, 4($sp)
    
    # Half #1
    move $a0, $s0                   # Load the x-coordinate ($s0) into $a0
    move $a1, $s1                   # Load the y-coordinate ($s1) into $a1
    move $a3, $v0                   # Load the orientation into $a3
    beqz $t0, clear_color_1         # If input ($a0) is 0, set color to background color
    move $a2, $s2                   # Load pixel color ($s2) into $a2
    j draw_half_1
    clear_color_1:
        lw $a2, BACKGROUND_COLOR
    draw_half_1:
        jal set_cell                   # Draw the pixel at the x and y-coordinate
    
    # Restore $t0 after set_pixel
    lw $t0, 4($sp)
    lw $v0, 8($sp)
    lw $v1, 12($sp)
    
    # Half #2
    move $a0, $s3                   # Load the x-coordinate ($s3) into $a0
    move $a1, $s4                   # Load the y-coordinate ($s4) into $a1
    move $a3, $v1                   # Load the orientation into $a3
    beqz $t0, clear_color_2         # If input ($a0) is 0, set color to background color
    move $a2, $s5                   # Load pixel color ($s5) into $a2
    j draw_half_2
    clear_color_2:
        lw $a2, BACKGROUND_COLOR
    draw_half_2:
        jal set_cell                   # Draw the pixel at the x and y-coordinate
    
    # Restore $ra after set_pixel
    lw $ra, 0($sp)
    addi $sp, $sp, 16
    jr $ra

##############################################################################
# KEYBOARD MOVEMENT
##############################################################################

keyboard_input:
    # Attempt to read an inputted character from the bitmap without
    # blocking.

    # Save $ra (in main after keyboard_input)
    SAVE_RA()
    
    li $v0, 32                      # Load system call to read character
    li $a0, 1                       # Specify file descriptor (stdin)
    syscall                         # Read a character
                                    
    lw $a0, ADDR_KBRD               # Load base address for keyboard ($t0)
    lw $t1, 0($a0)                  # Load first word from keyboard ($t1)
    beq $t1, 1, handle_input        # If key pressed (first word is 1), handle key press
    
    after_handle_input:
    
    # Restore $ra (in main after keyboard_input)
    RESTORE_RA()
    jr $ra

handle_input:
    # Move, rotate, quit, or otherwise do nothing based on the 
    # inputted character.
    # Args:
    #   $a0: full keyboard input
    
    lw $a0, 4($a0)                  # Load second word from keyboard
    
    la $ra, after_move_block
    
    beq $a0, 113, end_game          # Check if the key q was pressed
    
    beq $a0, 119, rotate            # Check if the key w was pressed
    beq $a0, 97, move_left          # Check if the key a was pressed
    beq $a0, 115, move_down         # Check if the key s was pressed
    beq $a0, 100, move_right        # Check if the key d was pressed
    
    beq $a0, 107, rotate            # Check if the key k was pressed
    beq $a0, 104, move_left         # Check if the key h was pressed
    beq $a0, 106, move_down         # Check if the key j was pressed
    beq $a0, 108, move_right        # Check if the key l was pressed
    
    after_move_block:
    
    j after_handle_input

end_game:
    # Quit the game and end the program.
    
	li $v0, 10                      # Quit gracefully
	syscall

rotate:
    # Attempt to rotate the block based on its current
    # orientation.
    # Args:
    #   $s0: x-coordinate of half #1 of the block
    #   $s1: y-coordinate of half #2 of the block
    #   $s3: x-coordinate of half #2 of the block
    #   $s4: y-coorindate of half #2 of the block
    
    SAVE_RA()
    
    jal get_block_orientation
    
    la $ra, after_rotate_block
    
    # Half #2 is to the right of half #1
    beq $v0, 3, rotate_three_to_six
    
    # Half #2 is below half #1
    beq $v0, 6, rotate_six_to_nine
    
    # Half #2 is to the left of half #1
    beq $v0, 9, rotate_nine_to_twelve
    
    # Half #2 is above half #1
    beq $v0, 12, rotate_twelve_to_three
    
    after_rotate_block:
    
    RESTORE_RA()
    jr $ra

rotate_three_to_six:
    # Attempt to rotate the block from being angled to the right to 
    # being angled downwards.
    # Args:
    #   $s0: x-coordinate of half #1 of the block
    #   $s1: y-coordinate of half #2 of the block
    #   $s3: x-coordinate of half #2 of the block
    #   $s4: y-coorindate of half #2 of the block
    
    SAVE_RA()

    lw $t0, CELL_SIZE
    li $a0, 0
    add $a1, $zero, $t0
    jal rotate_block
    
    j end_restore_ra

rotate_six_to_nine:
    # Attempt to rotate the block from being angled to downards to 
    # being angled to the left.
    # Args:
    #   $s0: x-coordinate of half #1 of the block
    #   $s1: y-coordinate of half #2 of the block
    #   $s3: x-coordinate of half #2 of the block
    #   $s4: y-coorindate of half #2 of the block

    SAVE_RA()
    
    lw $t0, CELL_SIZE
    sub $a0, $zero, $t0
    li $a1, 0
    jal rotate_block
    
    j end_restore_ra

rotate_nine_to_twelve:
    # Attempt to rotate the block from being angled to to the left to 
    # being angled upwards.
    # Args:
    #   $s0: x-coordinate of half #1 of the block
    #   $s1: y-coordinate of half #2 of the block
    #   $s3: x-coordinate of half #2 of the block
    #   $s4: y-coorindate of half #2 of the block

    SAVE_RA()
    
    lw $t0, CELL_SIZE
    li $a0, 0
    sub $a1, $zero, $t0
    jal rotate_block
    
    j end_restore_ra

rotate_twelve_to_three:
    # Attempt to rotate the block from being angled upwards to 
    # being angled to the right.
    # Args:
    #   $s0: x-coordinate of half #1 of the block
    #   $s1: y-coordinate of half #2 of the block
    #   $s3: x-coordinate of half #2 of the block
    #   $s4: y-coorindate of half #2 of the block
    
    SAVE_RA()
    
    lw $t0, CELL_SIZE
    add $a0, $zero, $t0
    li $a1, 0
    jal rotate_block
    
    j end_restore_ra

rotate_block:
    # Attempt to rotate half #2 of the block based on the arguments
    # that specify where the cell should be moved to. This will not
    # rotate the block if it would cause a collision with filled
    # space or the border.
    # Args:
    #   $a0: CELL_SIZE to rotate right, -CELL_SIZE to rotate left, 
    #       0 otherwise
    #   $a1: CELL_SIZE to rotate down, -CELL_SIZE to rotate up, 
    #       0 otherwise
    #   $s0: x-coordinate of half #1 of the block
    #   $s1: y-coordinate of half #2 of the block
    #   $s3: x-coordinate of half #2 of the block
    #   $s4: y-coorindate of half #2 of the block
    # Returns:
    #   $v0: 0 if not rotated, 1 if successfully rotated

    # Save $ra, $a0, $a1
    sub $sp, $sp, 12
    sw $ra, 0($sp)
    sw $a0, 4($sp)
    sw $a1, 8($sp)

    # Rotate if block doesn't collide
    move $a2, $s0
    move $a3, $s1
    jal get_cell_collision
    beq $v0, 0, do_rotate_block
    li $v0, 0
    j end_rotate_block
    
    do_rotate_block:
        # Restore $a0, $a1
        lw $a0, 4($sp)
        lw $a1, 8($sp)
        
        # Rotate half #2
        add $s3, $s0, $a0
        add $s4, $s1, $a1
        
        li $v0, 1
    
    end_rotate_block:
    
    # Restore $ra
    lw $ra, 0($sp)
    addi $sp, $sp, 12
    jr $ra
    

move_left:
    # Attempt to move the block to the left.
    # Args:
    #   $s0: x-coordinate of half #1 of the block
    #   $s1: y-coordinate of half #2 of the block
    #   $s3: x-coordinate of half #2 of the block
    #   $s4: y-coorindate of half #2 of the block
    
    SAVE_RA()
    
    lw $t0, CELL_SIZE
    sub $a0, $zero, $t0
    li $a1, 0
    jal move_block
    
    j end_restore_ra

move_down:
    # Attempt to move the block to down, and place it on a succesful
    # movement.
    # Args:
    #   $s0: x-coordinate of half #1 of the block
    #   $s1: y-coordinate of half #2 of the block
    #   $s3: x-coordinate of half #2 of the block
    #   $s4: y-coorindate of half #2 of the block

    SAVE_RA()
    
    lw $t0, CELL_SIZE
    li $a0, 0
    add $a1, $zero, $t0
    jal move_block
    # Place if block doesn't move
    beq $v0, 0, place_down_block
    jal reset_timer                     # OPTIONAL: Reset the timer on move down there's no double move downs?
    j end_restore_ra
    
    place_down_block:
        jal update_block
        jal is_entrance_blocked 
        jal simulate_grid
        jal generate_block
        
        j end_restore_ra


is_entrance_blocked:
    # Ends game if bottle entrance is blocked. Continues otherwise.
    # Logic: If placing down the block matches the coordinates of 
    #   generate_block, end game.
    
    SAVE_RA()
    
    lw $t0 MAX_X
    lw $t1, MIN_X
    sub $t0, $t0, $t1
    div $t0, $t0, 2         # Halve the width into $t1
    add $t1, $t0, $t1
    lw $t2, CELL_SIZE
    div $t3, $t2, 2
    sub $t1, $t1, $t3       # To align with grid correctly
    add $t1, $t1, $t2
    sub $t0, $t1, $t2       # Subtract CELL_SIZE from $t1 into $t0
    # Initialize half #1 starting coordinates
    move $t4, $t0
    lw $t5, MIN_Y
    add $t5, $t5, $t3       # To align with grid correctly
    # Initialize half #2 starting coordinates
    move $t6, $t1
    lw $t7, MIN_Y
    add $t7, $t7, $t3       # To align with grid correctly
    
    lw $t8, BACKGROUND_COLOR
    
    move $a0, $t4
    move $a1, $t5
    jal get_cell
    bne $v0, $t8, end_game
    
    move $a0, $t6
    move $a1, $t7
    jal get_cell
    bne $v0, $t8, end_game
    
    RESTORE_RA()
    jr $ra

move_right:
    # Attempt to move the block to the right.
    # Args:
    #   $s0: x-coordinate of half #1 of the block
    #   $s1: y-coordinate of half #2 of the block
    #   $s3: x-coordinate of half #2 of the block
    #   $s4: y-coorindate of half #2 of the block

    SAVE_RA()
    
    lw $t0, CELL_SIZE
    add $a0, $zero, $t0
    li $a1, 0
    jal move_block
    
    j end_restore_ra

move_block:
    # Attempt to move the block based on the arguments that specify
    # where the block should be moved. This will not move the block if 
    # it would cause a collision with filled space or the border.
    # Args:
    #   $a0: CELL_SIZE if going right, -CELL_SIZE if going left, 
    #       0 otherwise
    #   $a1: CELL_SIZE if going down, -CELL_SIZE if going up, 
    #       0 otherwise
    #   $s0: x-coordinate of half #1 of the block
    #   $s1: y-coordinate of half #2 of the block
    #   $s3: x-coordinate of half #2 of the block
    #   $s4: y-coorindate of half #2 of the block
    # Returns:
    #   $v0: 0 if not moved, 1 if successfully moved

    # Save $ra, $a0, $a1
    sub $sp, $sp, 12
    sw $ra, 0($sp)
    sw $a0, 4($sp)
    sw $a1, 8($sp)
    
    # Move if block doesn't collide
    jal get_block_collision
    beq $v0, 0, do_move_block
    li $v0, 0
    j end_move_block
    
    do_move_block:
        # Restore $a0, $a1
        lw $a0, 4($sp)
        lw $a1, 8($sp)
        
        # Move block
        add $s0, $s0, $a0
        add $s1, $s1, $a1
        add $s3, $s3, $a0
        add $s4, $s4, $a1
        
        li $v0, 1
    
    end_move_block:
    
    # Restore $ra
    lw $ra, 0($sp)
    addi $sp, $sp, 12
    jr $ra
    
    

##############################################################################
# COLLISION DETECTION
##############################################################################
    
pixel_in_border:
    # Check whether the specified coordinates is outside or in the
    # borders or not, without factoring in any movement.
    # Args:
    #   $a0: x-coordinate of pixel
    #   $a1 = y-coordinate of pixel
    # Returns:
    #   $v0: 0 if no collision, 1 if collision with border
    
    # Collision with at top border
    lw $t0, MIN_Y
    blt $a1, $t0, had_pixel_in_border
    
    # Collision with left border
    lw $t0, MIN_X
    blt $a0, $t0, had_pixel_in_border
    
    # Collision with bottom border
    lw $t0, MAX_Y
    bgt $a1, $t0, had_pixel_in_border
    
    # Collision with right border
    lw $t0, MAX_X
    bgt $a0, $t0, had_pixel_in_border
    
    li $v0, 0
    j end
    
    had_pixel_in_border:
        li $v0, 1
        j end
    

get_cell_collision:
    # Checks whether the specified cell coordinates will have a
    # collision with the border or a filled space, based on the 
    # specified movement.
    # Args:
    #   $a0: CELL_SIZE if going right, -CELL_SIZE if going left, 
    #       0 otherwise
    #   $a1: CELL_SIZE if going down, -CELL_SIZE if going up, 
    #       0 otherwise
    #   $a2: x-coordinate of cell
    #   $a3: y-coordinate of cell
    #   $s0: x-coordinate of half #1 of the block
    #   $s1: y-coordinate of half #2 of the block
    #   $s3: x-coordinate of half #2 of the block
    #   $s4: y-coorindate of half #2 of the block
    # Returns:
    #   $v0 = 0 if no collision, $v0 = 1 if collision
    
    SAVE_RA()
    
    add $a0, $a2, $a0
    add $a1, $a3, $a1
    jal pixel_in_border
    beq $v0, 1, has_pixel_collision
    jal get_cell
    lw $t0, BACKGROUND_COLOR
    bne $v0, $t0, has_pixel_collision
    
    li $v0, 0
    j end_restore_ra
    
    has_pixel_collision:
        li $v0, 1
        j end_restore_ra

get_block_collision:
    # Checks whether the block will have a collision with the border
    # or a filled space, based on the specified movement.
    # Args:
    #   $a0: CELL_SIZE if going right, -CELL_SIZE if going left, 
    #       0 otherwise
    #   $a1: CELL_SIZE if going down, -CELL_SIZE if going up, 
    #       0 otherwise
    #   $a2: x-coordinate of cell
    #   $a3: y-coordinate of cell
    # Returns:
    #   $v0 = 0 if no collision, $v0 = 1 if collision
    
    # Save $ra, $a0, $a1
    sub $sp, $sp, 12
    sw $ra, 0($sp)
    sw $a0, 4($sp)
    sw $a1, 8($sp)
    
    # Half #1
    move $a2, $s0
    move $a3, $s1
    jal get_cell_collision
    beq $v0, 1, has_block_collision
    
    # Restore $a0, $a1
    lw $a0, 4($sp)
    lw $a1, 8($sp)
    
    # Half #2
    move $a2, $s3
    move $a3, $s4
    jal get_cell_collision
    beq $v0, 1, has_block_collision
    
    li $v0, 0
    j end_get_block_collision
    
    has_block_collision:
        li $v0, 1
        j end_get_block_collision
    
    end_get_block_collision:
    
    # Restore $ra
    lw $ra, 0($sp)
    addi $sp, $sp, 12
    jr $ra

##############################################################################
# TIMER
##############################################################################

reset_timer:
    # Reset the timer back to 0.
    
    li $s6, 0
    
    jr $ra

increment_timer:
    # Increments the timer by 1, and tick it if it reaches the
    # maximum.
    # Args:
    #   $s6: timer

    SAVE_RA()
    
    lw $t0, FRAMERATE
    addi $s6, $s6, 1
    
    la $ra after_tick_timer
    beq $s6, $t0, tick_timer
    
    after_tick_timer:
    
    RESTORE_RA()
    jr $ra

tick_timer:
    # Move the block down and reset the timer finishes a cycle.
    
    SAVE_RA()
    
    jal reset_timer
    jal move_down
    
    RESTORE_RA()
    jr $ra

pause_tick:
    # Pause the game until the timer completes a full cycle, depending
    # on the ANIMATION_MULTIPLIER, and redraw the grid after the tick. 
    SAVE_RA()
    
    jal reset_timer
    while_pause_tick:
        lw $t0, FRAMERATE
        lw $t1, ANIMATION_MULTIPLIER
        mult $t0, $t0, $t1
        beq $s6, $t0, end_pause_tick
        addi $s6, $s6, 1
        jal draw_grid
        j while_pause_tick
    
    end_pause_tick:
    jal reset_timer
    RESTORE_RA()
    jr $ra
    

##############################################################################
# GRID GETTER/SETTER
##############################################################################

set_cell:
    # Draw the cell with the at the specified coordinates, with the 
    # specified color, and orientation, depending on the CELL_SIZE.
    # Args:
    #   $a0: x-coordinate of the cell
    #   $a1: y-coordinate of the cell
    #   $a2: color of the cell
    #   $a3: 0 for all borders, 3 for no right border, 6 for no bottom
    #       border, 9 for no left border, 12 for no top border
    
    # Calculate half of cell size
    lw $t6, CELL_SIZE
    div $t6, $t6, 2
    
    # Save $ra, $a0, $a1, $t0
    sub $sp, $sp, 12
    sw $ra, 0($sp)
    sw $a0, 4($sp)
    sw $a1, 8($sp)
    
    # Set top left
    sub $a0, $a0, $t6
    sub $a1, $a1, $t6
    jal set_pixel
    
    lw $a0, 4($sp)
    lw $a1, 8($sp)
    
    # Set top middle
    beq $a3, 12, skip_set_top_border
    sub $a1, $a1, $t6
    jal set_pixel
    
    lw $a0, 4($sp)
    lw $a1, 8($sp)
    skip_set_top_border:
    
    # Set top right
    add $a0, $a0, $t6
    sub $a1, $a1, $t6
    jal set_pixel
    
    lw $a0, 4($sp)
    lw $a1, 8($sp)
    
    # Set middle left
    beq $a3, 9, skip_set_left_border
    sub $a0, $a0, $t6
    jal set_pixel
    
    lw $a0, 4($sp)
    lw $a1, 8($sp)
    skip_set_left_border:
    
    # Set middle right
    beq $a3, 3, skip_set_right_border
    add $a0, $a0, $t6
    jal set_pixel
    
    lw $a0, 4($sp)
    lw $a1, 8($sp)
    skip_set_right_border:
    
    # Set bottom left
    sub $a0, $a0, $t6
    add $a1, $a1, $t6
    jal set_pixel
    
    lw $a0, 4($sp)
    lw $a1, 8($sp)
    
    # Set bottom middle
    beq $a3, 6, skip_set_bottom_border
    add $a1, $a1, $t6
    jal set_pixel
    
    lw $a0, 4($sp)
    lw $a1, 8($sp)
    skip_set_bottom_border:
    
    # Set bottom right
    add $a0, $a0, $t6
    add $a1, $a1, $t6
    jal set_pixel
    
    lw $a0, 4($sp)
    lw $a1, 8($sp)
    
    # Set middle
    lw $a2, BACKGROUND_COLOR
    jal set_pixel
    
    lw $a0, 4($sp)
    lw $a1, 8($sp)
    
    # Restore $ra
    lw $ra, 0($sp)
    addi $sp, $sp, 12
    jr $ra

set_virus:
    # Draw the virus with the specified coordinates, with the specified 
    # color depending on the CELL_SIZE.
    # Args:
    #   $a0: x-coordinate of the cell
    #   $a1: y-coordinate of the cell
    #   $a2: color of the cell
    
    # Calculate half of cell size
    lw $t6, CELL_SIZE
    div $t6, $t6, 2
    
    # Save $ra, $a0, $a1
    sub $sp, $sp, 12
    sw $ra, 0($sp)
    sw $a0, 4($sp)
    sw $a1, 8($sp)
    
    # Set top left
    sub $a0, $a0, $t6
    sub $a1, $a1, $t6
    jal set_pixel
    
    lw $a0, 4($sp)
    lw $a1, 8($sp)
    
    # Set top right
    add $a0, $a0, $t6
    sub $a1, $a1, $t6
    jal set_pixel
    
    lw $a0, 4($sp)
    lw $a1, 8($sp)
    
    # Set middle left
    sub $a0, $a0, $t6
    jal set_pixel
    
    lw $a0, 4($sp)
    
    # Set middle right
    add $a0, $a0, $t6
    jal set_pixel
    
    lw $a0, 4($sp)
    
    # Set bottom middle
    add $a1, $a1, $t6
    jal set_pixel
    
    lw $a1, 8($sp)
    
    # Set middle
    jal set_pixel
    
    # Restore $ra
    lw $ra, 0($sp)
    addi $sp, $sp, 12
    jr $ra

get_pixel:
    # Get the pixel at the specified coordinates in the grid.
    # Args:
    #   $a0: x-coordinate of the pixel
    #   $a1: y-coordinate of the pixel
    # Returns:
    #   $v0: color of the pixel
    
    # Save $ra before calling coord_to_idx
    SAVE_RA()
    
    jal coord_to_idx
    
    lw $v0, 0($v0)          # Load the value at the grid index into $v0
    
    # Restore $ra after returning from coord_to_idx
    RESTORE_RA()
    jr $ra

set_pixel:
    # Set the pixel at the specified coordinates in the grid.
    # Args:
    #   $a0: x-coordinate of the pixel
    #   $a1: y-coordinate of the pixel
    #   $a2: color of the pixel
    
    # Save $ra before calling coord_to_idx
    SAVE_RA()
    
    jal coord_to_idx
    
    sw $a2, 0($v0)          # Store the value of $a2 at the address in $t0
    
    # Restore $ra after returning from coord_to_idx
    RESTORE_RA()
    jr $ra

get_cell:
    # Return the color of the cell with the at the specified 
    # coordinates, using the color of the top-left corner of the cell.
    # Args:
    #   $a0: x-coordinate of the cell
    #   $a1: y-coordinate of the cell
    # Returns:
    #   $v0: color of the cell
    
    # Save $ra before calling coord_to_idx
    SAVE_RA()
    
    lw $t0, CELL_SIZE
    div $t0, $t0, 2
    sub $a0, $a0, $t0
    sub $a1, $a1, $t0
    
    jal get_pixel
    
    # Restore $ra after returning from coord_to_idx
    RESTORE_RA()
    jr $ra

coord_to_idx:
    # Convert the specified coordinates into the correspnding memory
    # index in the grid. 
    # Args:
    #   $a0: x-coordinate of the cell
    #   $a1: y-coordinate of the cell
    # Returns:
    #   $v0: corresponding index in the grid
    
    la $t0, GRID       # Load base address for the grid ($t0)
    
    lw $t1, DISPLAY_WIDTH   # Load the display width ($t1)
    lw $t2, DISPLAY_HEIGHT  # Load the display height ($t2) (not needed)
    lw $t3, PIXEL_SIZE      # Load pixel size/integer length
    
    mult $t4, $a0, $t3      # x-offset ($t4): Multiply x-coordinate ($s0) by pixel size ($t3)
    mult $t5, $a1, $t1      # Convert y-coordinate into length using display width ($t1) 
    mult $t5, $t5, $t3      # y-offset ($t5): Multiply y-coordinate length ($s5) by pixel size ($t3)
    
    add $t0, $t0, $t4       # Add the x-offset ($t4) into the address
    add $t0, $t0, $t5       # Add the y-offset ($t5) into the address
    
    move $v0, $t0
    
    jr $ra      

get_block_orientation:
    # Return the orientation of both halves of the block, depending on
    # their locations.
    # Args:
    #   $s0: x-coordinate of half #1 of the block
    #   $s1: y-coordinate of half #2 of the block
    #   $s3: x-coordinate of half #2 of the block
    #   $s4: y-coorindate of half #2 of the block
    # Returns:
    #   $v0: orientation of half #1
    #   $v1: orientation of half #2
    #   The orientation is 3 if facing right, 6 if facing down, 
    #       9 if facing down, 12 if facing up, and 0 otherwise
    
    lw $t2, CELL_SIZE
    
    # Half #2 is to the right of half #1
    sub $t0, $s3, $t2
    bne $s0, $t0, skip_right_block_orientation
    li $v0, 3
    li $v1, 9
    jr $ra
    skip_right_block_orientation:
    
    # Half #2 is below half #1
    sub $t1, $s4, $t2
    bne $s1, $t1, skip_bottom_block_orientation
    li $v0, 6
    li $v1, 12
    jr $ra
    skip_bottom_block_orientation:
    
    # Half #2 is to the left of half #1
    add $t0, $s3, $t2
    bne $s0, $t0, skip_left_block_orientation
    li $v0, 9
    li $v1, 3
    jr $ra
    skip_left_block_orientation:
    
    # Half #2 is above half #1
    add $t1, $s4, $t2
    bne $s1, $t1, skip_top_block_orientation
    li $v0, 12
    li $v1, 6
    jr $ra
    skip_top_block_orientation:
    
    jr $ra

get_linked_cell:
    # Return the coordinates of the linked cell, or return the same
    # coordinates that were specified of there is no linked cell, 
    # based on the orientation of cell at the specified coordinates.
    # Args:
    #   $a0: x-coordinate of the cell
    #   $a1: y-coordinate of the cell
    # Returns:
    #   $v0: x-coordinate of the linked cell
    #   $v1: y-coordinate of the linked cell
    
    SAVE_RA()
    
    jal get_cell_orientation
    lw $t0, CELL_SIZE
    
    bne $v0, 3, skip_right_cell_orientation
    add $v0, $a0, $t0
    add $v1, $a1, 0
    j end_restore_ra
    skip_right_cell_orientation:
    
    bne $v0, 6, skip_down_cell_orientation
    add $v0, $a0, 0
    add $v1, $a1, $t0
    j end_restore_ra
    skip_down_cell_orientation:
    
    bne $v0, 9, skip_left_cell_orientation
    sub $v0, $a0, $t0
    add $v1, $a1, 0
    j end_restore_ra
    skip_left_cell_orientation:
    
    bne $v0, 12, skip_bottom_cell_orientation
    add $v0, $a0, 0
    sub $v1, $a1, $t0
    j end_restore_ra
    skip_bottom_cell_orientation:
    
    move $v0, $a0
    move $v1, $a1
    j end_restore_ra

get_cell_orientation:
    # Return the orientation of the cell based on which direction it
    # is facing.
    # Args:
    #   $a0: x-coordinate of the cell
    #   $a1: y-coordinate of the cell
    # Returns:
    #   $v0: orientation of the cell
    #   The orientation is 3 if facing right, 6 if facing down, 
    #       9 if facing down, 12 if facing up, and 0 otherwise
    
    # Save $ra, $a0, $a1
    sub $sp, $sp, 36
    sw $ra, 0($sp)
    sw $a0, 4($sp)
    sw $a1, 8($sp)
    
    # Ignore cell if virus
    jal is_virus
    li $t0, 1
    bne $v0, $t0, after_check_get_cell_orientation
    li $v0, 0
    j after_get_cell_orientation
    
    after_check_get_cell_orientation:
    lw $a0, 4($sp)
    lw $a1, 8($sp)
    
    jal get_cell
    lw $a0, 4($sp)
    lw $a1, 8($sp)
    move $t0, $v0
    sw $t0, 12($sp)             # Save the cell's color
    
    lw $t1, CELL_SIZE
    div $t1, $t1, 2
    sw $t1, 16($sp)             # Save half the cell's size
    
    # $t2 = x-offset to border, $t3 = y-offset to next border
    # $t4 = associated return value
    
    # Right oriented
    add $t2, $zero, $t1
    add $t3, $zero, $zero
    li $t4, 3
    jal check_cell_orientation
    
    # Down oriented
    add $t2, $zero, $zero
    add $t3, $zero, $t1
    li $t4, 6
    jal check_cell_orientation
    
    # Left oriented
    sub $t2, $zero, $t1
    add $t3, $zero, $zero
    li $t4, 9
    jal check_cell_orientation
    
    # Up oriented
    add $t2, $zero, $zero
    sub $t3, $zero, $t1
    li $t4, 12
    jal check_cell_orientation
    
    li $v0, 0
    j after_get_cell_orientation
    
    check_cell_orientation:
        sw $ra, 20($sp)
        sw $t2, 24($sp)
        sw $t3, 28($sp)
        sw $t4, 32($sp)
        
        add $a0, $a0, $t2
        add $a1, $a1, $t3
        jal get_pixel
        lw $a0, 4($sp)
        lw $a1, 8($sp)
        lw $t0, 12($sp)
        lw $t1, 16($sp)
        lw $t2, 24($sp)
        lw $t3, 28($sp)
        lw $t4, 32($sp)
        # If border pixel's color is not equal to the rest of the cell, this is its orientation
        beq $v0, $t0, after_check_cell_orientation
        move $v0, $t4
        j after_get_cell_orientation
        
        after_check_cell_orientation:
        lw $ra, 20($sp)
        jr $ra
    
    after_get_cell_orientation:
    
    # Restore $ra
    lw $ra, 0($sp)
    addi $sp, $sp, 36
    jr $ra
    
    
##############################################################################
# GRID SIMULATION
##############################################################################

simulate_grid:
    # Simulate the grid's reaction once a block is placed down, 
    # clearing cells and simulating cell falling until no more
    # cells need to be cleared.
    
    SAVE_RA()
    
    while_simulate_grid:
        jal clear_lines
        beq $v0, 0, end_simulate_grid
        # jal pause_tick
        jal fall_blocks
        j while_simulate_grid
    
    end_simulate_grid:
    
    RESTORE_RA()
    jr $ra

##############################################################################
# CLEARING LINES
##############################################################################

clear_lines:
    # Unlink, then clear all the cells that form a line of length
    # equal or longer than CLEAR_LENGTH along a row or column, and
    # return the total number of cells cleared from both clearing both
    # rows and columns.
    # Returns:
    #   $v0 = number of blocks cleared from both rows and columns
    
    sub $sp, $sp, 8
    sw $ra, 0($sp)
    
    # Clear rows
    li $a0, 0
    jal clear_loop
    
    sw $v0, 4($sp)
    
    # Clear columns
    li $a0, 1
    jal clear_loop
    
    lw $t0, 4($sp)
    add $v0, $v0, $t0
    
    lw $ra, 0($sp)
    addi $sp, $sp, 8
    jr $ra

clear_loop:
    # Unlink, then clear all cells that form a line of length
    # equal or longer than CLEAR_LENGTH along rows or columns,
    # depending on the specified input, and return the number
    # of cells cleared.
    # Args:
    #   $a0: 0 to clear row lines, 1 to clear column lines
    # Returns:
    #   $v0 = number of blocks cleared from rows or from columns

    SAVE_RA()
    
    lw $t2, CELL_SIZE           # Specify stride length ($t2) for the index
    div $t3, $t2, 2
    lw $t0, MAX_X
    sub $t0, $t0, $t3
    lw $t1, MAX_Y
    sub $t1, $t1, $t3           # Specify index ($t0, $t1) at the center of the last cell within border
    
    li $t3, 0                   # Specify color counter
    lw $t4, BACKGROUND_COLOR    # Specify current color
    
    li $t6, 0                   # Specify cleared cell counter
    
    sub $sp, $sp, 44
    sw $a0, 0($sp)
    sw $t0, 4($sp)
    sw $t1, 8($sp)
    sw $t2, 12($sp)
    sw $t3, 16($sp)
    sw $t4, 20($sp)
    sw $t6, 32($sp)
    
    while_clear_loop:
        beq $a0, 0, check_end_row_clear_loop
        beq $a0, 1, check_end_column_clear_loop
        j after_check_end_clear_loop
        
        check_end_row_clear_loop:
        lw $t5, MIN_X
        lw $t6, MIN_Y
        blt $t1, $t6, end_clear_loop
        blt $t0, $t5, reset_clear_loop
        j after_check_end_clear_loop
        
        check_end_column_clear_loop:
        lw $t5, MIN_X
        lw $t6, MIN_Y
        blt $t0, $t5, end_clear_loop
        blt $t1, $t6, reset_clear_loop
        j after_check_end_clear_loop
        
        after_check_end_clear_loop:
        move $a0, $t0
        move $a1, $t1
        jal get_cell
        
        lw $a0, 0($sp)
        lw $t0, 4($sp)
        lw $t1, 8($sp)
        lw $t2, 12($sp)
        lw $t3, 16($sp)
        lw $t4, 20($sp)
        lw $t6, 32($sp)
        
        lw $t5, BACKGROUND_COLOR
        beq $v0, $t5, reset_clear_color_counter       # Reset color counter if no block at index
        beq $t4, $t5, start_clear_color_counter       # Start color counter if current color is background
        bne $v0, $t4, start_clear_color_counter       # Start color counter if block at index is difference from current color 
                                                    # Otherwise, increment color counter
        add $t3, $t3, 1
        sw $t3, 16($sp)
        j after_clear_color_counter
        
        start_clear_color_counter:                    # Start the color counter at 1
            la $ra, after_start_clear_color_counter
            lw $t5, CLEAR_LENGTH
            move $t4, $v0
            sw $t4, 20($sp)
            bge $t3, $t5, mark_clear_color            # Mark the clear if found more than CLEAR_LENGTH in a clear
            
            after_start_clear_color_counter:
            li $t3, 1
            sw $t3, 16($sp)
            
            j after_clear_color_counter
        
        reset_clear_color_counter:                    # Reset the color counter to 0
            la $ra, after_reset_clear_color_counter
            lw $t5, CLEAR_LENGTH
            lw $t4, BACKGROUND_COLOR
            sw $t4, 20($sp)
            bge $t3, $t5, mark_clear_color            # Mark the clear if found more than CLEAR_LENGTH in a clear
            
            after_reset_clear_color_counter:
            li $t3, 0
            sw $t3, 16($sp)
            
            j after_clear_color_counter
        
        mark_clear_color:
            sw $ra, 24($sp)
            
            while_mark_clear_color:
                ble $t3, 0, after_mark_clear_color
                
                lw $t5, CELL_SIZE
                mult $t5, $t3, $t5
                
                beq $a0, 0, check_mark_row_clear_color
                beq $a0, 1, check_mark_column_clear_color
                j after_check_mark_clear_color
                
                check_mark_row_clear_color:
                add $t5, $t0, $t5                   # Coordinate of the block to be marked
                sw $t5, 28($sp)
                move $a0, $t5
                move $a1, $t1
                jal unlink_block                    # Unlink block in line
                lw $t1, 8($sp)
                lw $t5, 28($sp)
                move $a0, $t5
                move $a1, $t1
                sw $a0, 32($sp)
                sw $a1, 36($sp)
                j after_check_mark_clear_color
                
                check_mark_column_clear_color:
                add $t5, $t1, $t5                   # Coordinate of the block to be marked
                sw $t5, 28($sp)
                move $a0, $t0
                move $a1, $t5
                jal unlink_block                    # Unlink block in line
                lw $t0, 4($sp)
                lw $t5, 28($sp)
                move $a0, $t0
                move $a1, $t5
                sw $a0, 32($sp)
                sw $a1, 36($sp)
                j after_check_mark_clear_color
                
                after_check_mark_clear_color:
                
                jal highlight_jar
                jal pause_tick
                lw $a0, 32($sp)
                lw $a1, 36($sp)
                lw $t0, 4($sp)
                lw $t1, 8($sp)
                lw $t2, 12($sp)
                lw $t3, 16($sp)
                lw $t4, 20($sp)
                lw $t5, 28($sp)
                lw $t6, 32($sp)
                
                lw $a2, BACKGROUND_COLOR
                li $a3, 0
                jal set_cell                        # Clear cell in line
                lw $a0, 0($sp)
                lw $t0, 4($sp)
                lw $t1, 8($sp)
                lw $t2, 12($sp)
                lw $t3, 16($sp)
                lw $t4, 20($sp)
                lw $t5, 28($sp)
                lw $t6, 32($sp)
                
                sub $t3, $t3, 1
                sw $t3, 16($sp)
                
                add $t6, $t6, 1
                sw $t6, 32($sp)
                
                jal draw_jar
                jal pause_tick
                lw $a0, 0($sp)
                lw $t0, 4($sp)
                lw $t1, 8($sp)
                lw $t2, 12($sp)
                lw $t3, 16($sp)
                lw $t4, 20($sp)
                lw $t5, 28($sp)
                lw $t6, 32($sp)
                
                j while_mark_clear_color
            
            after_mark_clear_color:
            lw $ra, 24($sp)
            jr $ra
        
        after_clear_color_counter:
        
        beq $a0, 0, check_increment_row_clear_counter
        beq $a0, 1, check_increment_column_clear_counter
        j after_check_increment_clear_counter
        
        check_increment_row_clear_counter:
        sub $t0, $t0, $t2
        sw $t0, 4($sp)
        j after_check_increment_clear_counter
        
        check_increment_column_clear_counter:
        sub $t1, $t1, $t2
        sw $t1, 8($sp)
        j after_check_increment_clear_counter
        
        after_check_increment_clear_counter:
        
        j while_clear_loop
        
        reset_clear_loop:
            la $ra, after_reset_clear_loop
            lw $t5, CLEAR_LENGTH
            bge $t3, $t5, mark_clear_color            # Mark the clear if found more than CLEAR_LENGTH in a clear
            
            after_reset_clear_loop:
            beq $a0, 0, check_reset_row_clear_loop
            beq $a0, 1, check_reset_column_clear_loop
            j after_check_reset_clear_loop
            
            check_reset_row_clear_loop:
            div $t2, $t2, 2
            lw $t0, MAX_X
            sub $t0, $t0, $t2
            lw $t2, 12($sp)
            sw $t0, 4($sp)
            sub $t1, $t1, $t2
            sw $t1, 8($sp)
            j after_check_reset_clear_loop
            
            check_reset_column_clear_loop:
            div $t2, $t2, 2
            lw $t1, MAX_Y
            sub $t1, $t1, $t2
            lw $t2, 12($sp) 
            sw $t1, 8($sp)
            sub $t0, $t0, $t2
            sw $t0, 4($sp)
            j after_check_reset_clear_loop
            
            after_check_reset_clear_loop:
            li $t3, 0
            lw $t4, BACKGROUND_COLOR
            sw $t3, 16($sp)
            sw $t4, 20($sp)
            j while_clear_loop
    
    end_clear_loop:
    
    lw $t6, 32($sp)
    move $v0, $t6
    
    addi $sp, $sp, 44
    
    j end_restore_ra

unlink_block:
    # Unlinks both halves of the block at the specified coordinates,
    # making them each half an individual cell without an orientation.
    # Args:
    #   $a0: x-coordinate of the block's half's cell
    #   $a1: y-coordinate of the block's half's cell  
    
    # Save $ra, $a0, $a1, $t0
    sub $sp, $sp, 12
    sw $ra, 0($sp)
    sw $a0, 4($sp)
    sw $a1, 8($sp)
    
    jal get_linked_cell
    move $a0, $v0
    move $a1, $v1
    li $a2, 0
    jal unlink_cell
    
    lw $a0, 4($sp)
    lw $a1, 8($sp)
    li $a2, 1
    jal unlink_cell
    
    # Restore $ra
    lw $ra, 0($sp)
    addi $sp, $sp, 12
    jr $ra

unlink_cell:
    # Unlinks the cell at the specified coordinates, by redrawing
    # it without an orientation.
    # Args:
    #   $a0: x-coordinate of the cell
    #   $a1: y-coordinate of the cell
    #   $a2: 0 to unlink with the cell's color, 1 to unlink with CLEAR_COLOR
    
    # Save $ra, $a0, $a1, $t0
    sub $sp, $sp, 16
    sw $ra, 0($sp)
    sw $a0, 4($sp)
    sw $a1, 8($sp)
    sw $a2, 12($sp)
    
    jal get_cell
    lw $a0, 4($sp)
    lw $a1, 8($sp)
    lw $a2, 12($sp)
    li $a3, 0
    beq $a2, 1, clear_color_unlink_cell
    move $a2, $v0
    jal set_cell
    j after_unlink_cell
    
    clear_color_unlink_cell:
    lw $a2, CLEAR_COLOR
    jal set_cell
    
    after_unlink_cell:
    
    # Restore $ra
    lw $ra, 0($sp)
    addi $sp, $sp, 16
    jr $ra

##############################################################################
# FALLING BLOCKS
##############################################################################

fall_blocks:
    # Animate the blocks falling until there are no more floating
    # blocks that can fall, pausing for a tick after each movement.
    
    SAVE_RA()
    
    li $v0, -1                      # Initialize number of blocks fallen to != 0 so fall_loop runs at least once
    while_fall_blocks:
        beq $v0, 0, end_restore_ra
        
        la $ra, after_pause_tick
        bne $v0, -1, pause_tick     # Don't pause on the first check
        after_pause_tick:
        
        jal fall_loop
        
        j while_fall_blocks

fall_loop:
    # Move each cell or block that has an empty space below it down
    # by CELL_SIZE, starting from the bottom, and return the number
    # of cells that have moved.
    # Returns:
    #   $v0: number of cells that moved down

    SAVE_RA()
    
    lw $t2, CELL_SIZE           # Specify stride length ($t2) for the index
    div $t3, $t2, 2
    lw $t0, MAX_X
    sub $t0, $t0, $t3
    lw $t1, MAX_Y
    sub $t1, $t1, $t3           # Specify index ($t0, $t1) at the center of the last cell within border
    
    li $t3, 0                   # Specify fallen cell counter
    
    sub $sp, $sp, 16
    sw $t0, 0($sp)
    sw $t1, 4($sp)
    sw $t2, 8($sp)
    sw $t3, 12($sp)
    
    while_fall_loop:
        lw $t5, MIN_X
        lw $t6, MIN_Y
        blt $t1, $t6, end_fall_loop
        blt $t0, $t5, reset_fall_loop
        
        move $a0, $t0
        move $a1, $t1
        jal fall_cell
        lw $t0, 0($sp)
        lw $t1, 4($sp)
        lw $t2, 8($sp)
        lw $t3, 12($sp)
        
        add $t3, $t3, $v0
        sw $t3, 12($sp)
        
        sub $t0, $t0, $t2
        sw $t0, 0($sp)
        
        j while_fall_loop
        
        reset_fall_loop:
            div $t2, $t2, 2
            lw $t0, MAX_X
            sub $t0, $t0, $t2
            lw $t2, 8($sp)
            sw $t0, 0($sp)
            sub $t1, $t1, $t2
            sw $t1, 4($sp)
            j while_fall_loop
    
    end_fall_loop:
    
    move $v0, $t3
    
    addi $sp, $sp, 16
    
    j end_restore_ra

can_fall_cell:
    # Check whether the cell at the specified coordinates is able
    # to move down and if there are no collisions with filled
    # spaces or borders. If there is no cell, return 0.
    # Args:
    #   $a0: x-coordinate of the cell
    #   $a1: y-coordinate of the cell
    # Returns:
    #   $v0: 0 if cell cannot move down, 1 if cell can move down
    
    # Save $ra, $a0, $a1
    sub $sp, $sp, 12
    sw $ra, 0($sp)
    sw $a0, 4($sp)
    sw $a1, 8($sp)

    # Check 1: Ignore cell if background
    jal get_cell
    lw $t0, BACKGROUND_COLOR
    bne $v0, $t0, after_check1_can_fall_cell
    li $v0, 0
    j end_can_fall_cell
    
    after_check1_can_fall_cell:
    # Check 2: Ignore cell if virus
    lw $a0, 4($sp)
    lw $a1, 8($sp)
    
    jal is_virus
    li $t0, 1
    bne $v0, $t0, after_check2_can_fall_cell
    li $v0, 0
    j end_can_fall_cell
    
    after_check2_can_fall_cell:
    lw $a0, 4($sp)
    lw $a1, 8($sp)
    
    # Move if cell doesn't collide
    move $a2, $a0
    move $a3, $a1
    li $a0, 0
    lw $a1, CELL_SIZE
    jal get_cell_collision
    beq $v0, 0, do_can_fall_cell
    li $v0, 0
    j end_can_fall_cell
    
    do_can_fall_cell:
    li $v0, 1
    
    end_can_fall_cell:
    
    # Restore $ra
    lw $ra, 0($sp)
    addi $sp, $sp, 12
    jr $ra

fall_cell:
    # Attempt to move the cell at the specified coordinates downwards,
    # and returns whether or not it was successful. If there is no
    # cell, return 0.
    # Args:
    #   $a0: x-coordinate of the cell
    #   $a1: y-coordinate of the cell
    # Returns: 
    #   $v0 = 0 if not moved, $v0 = 1 if moved successfully

    # Save $ra, $a0, $a1
    sub $sp, $sp, 12
    sw $ra, 0($sp)
    sw $a0, 4($sp)
    sw $a1, 8($sp)
    
    # Check if other half of cell can also fall
    jal get_cell_orientation
    lw $a0, 4($sp)
    lw $a1, 8($sp)
    beq $v0, 3, check_left_can_fall_cell
    beq $v0, 9, check_right_can_fall_cell
    j after_check_half_can_fall_cell
    
    check_left_can_fall_cell:
    # Left half can only fall if right half of cell has already fallen
    lw $t0, CELL_SIZE
    add $a0, $a0, $t0
    jal get_cell
    lw $t1, BACKGROUND_COLOR
    beq $v0, $t1, do_fall_cell
    j skip_do_fall_cell
    
    check_right_can_fall_cell:
    # Right half can only fall if both cells can fall
    jal get_linked_cell
    move $a0, $v0
    move $a1, $v1
    jal can_fall_cell
    lw $a0, 4($sp)
    lw $a1, 8($sp)
    beq $v0, 0, skip_do_fall_cell
    
    after_check_half_can_fall_cell:
    
    jal can_fall_cell
    lw $a0, 4($sp)
    lw $a1, 8($sp)
    beq $v0, 0, skip_do_fall_cell
    
    do_fall_cell:
        # Get cell color
        lw $a0, 4($sp)
        lw $a1, 8($sp)
        jal get_cell
        
        # Draw new cell
        move $a2, $v0
        lw $a0, 4($sp)                      # Update to new x and y-coordinates
        lw $a1, 8($sp)
        jal get_cell_orientation
        move $a3, $v0
        lw $t0, CELL_SIZE
        add $a1, $a1, $t0
        jal set_cell
        
        # Clear old cell position
        lw $a0, 4($sp)
        lw $a1, 8($sp)
        lw $a2, BACKGROUND_COLOR
        li $a3, 0
        jal set_cell
        
        li $v0, 1
        j end_fall_cell
    
    skip_do_fall_cell:
    li $v0, 0
    
    end_fall_cell:
    
    # Restore $ra
    lw $ra, 0($sp)
    addi $sp, $sp, 12
    jr $ra
    
is_virus:
    # Return whether or not the cell specified at the given coordinate 
    # is a virus or not. 
    # Args:
    #   $a0: x-coordinate of the cell
    #   $a1: y-coordinate of the cell
    # Returns: 
    #   $v0 = 0 if cell is not a virus, $v0 = 1 if cell is a virus
    
    # Save $ra before calling get_pixel
    SAVE_RA()
    
    jal get_pixel # Color of pixel is stored in $v0
    lw $t0, BACKGROUND_COLOR
    
    # Compare pixel color with background color
    beq $v0, $t0, not_virus 
    li $v0, 1 
    j end_check_is_virus
    
    not_virus:
        li $v0, 0
    
    end_check_is_virus:
        # Restore $ra after returning from get_pixel
        RESTORE_RA()
        jr $ra
    